.. !split

.. _nonlin:alglevel:1D:

1D stationary nonlinear differential equations
==============================================

The section :ref:`nonlin:pdelevel` presented methods for linearizing
time-discrete PDEs directly prior to discretization in space.  We can
alternatively carry out the discretization in space of the
time-discrete nonlinear PDE problem and get a system of nonlinear
algebraic equations, which can be solved by Picard iteration or
Newton's method as presented in the section :ref:`nonlin:systems:alg`.
This latter approach will now be described in detail.

We shall work with the 1D problem

.. _Eq:nonlin:alglevel:1D:pde:

.. math::

    \tag{429}
    -({\alpha}(u)u^{\prime})^{\prime} + au = f(u),\quad x\in (0,L),
        \quad {\alpha}(u(0))u^{\prime}(0) = C,\ u(L)=D
        {\thinspace .}
        
        

The problem :ref:`(429) <Eq:nonlin:alglevel:1D:pde>` arises from the stationary
limit of a diffusion equation,

.. _Eq:nonlin:alglevel:1D:pde:tver:

.. math::

    \tag{430}
    \frac{\partial u}{\partial t} = \frac{\partial}{\partial x}\left(
        \alpha(u)\frac{\partial u}{\partial x}\right) - au + f(u),
        
        

as :math:`t\rightarrow\infty` and :math:`\partial u/\partial t\rightarrow 0`.
Alternatively, the problem :ref:`(429) <Eq:nonlin:alglevel:1D:pde>` arises
at each time level from implicit time discretization of
:ref:`(430) <Eq:nonlin:alglevel:1D:pde:tver>`. For example, a Backward Euler
scheme for :ref:`(430) <Eq:nonlin:alglevel:1D:pde:tver>` leads to

.. _Eq:nonlin:alglevel:1D:pde:tver:BE:

.. math::

    \tag{431}
    \frac{u^{n}-u^{n-1}}{\Delta t} =
        \frac{d}{dx}\left(
        \alpha(u^n)\frac{du^n}{dx}\right) - au^n + f(u^n){\thinspace .}
        
        

Introducing :math:`u(x)` for :math:`u^n(x)`, :math:`u^{(1)}` for :math:`u^{n-1}`, and defining :math:`f(u)`
in :ref:`(429) <Eq:nonlin:alglevel:1D:pde>` to be :math:`f(u)` in
:ref:`(431) <Eq:nonlin:alglevel:1D:pde:tver:BE>` plus :math:`u^{n-1}/\Delta t`, gives
:ref:`(429) <Eq:nonlin:alglevel:1D:pde>` with :math:`a=1/\Delta t`.

.. _nonlin:alglevel:1D:fd:

Finite difference discretization          (1)
---------------------------------------------

The nonlinearity in the differential equation
:ref:`(429) <Eq:nonlin:alglevel:1D:pde>` poses no more difficulty than a variable
coefficient, as in the term :math:`({\alpha}(x)u^{\prime})^{\prime}`.  We can
therefore use a standard finite difference approach to discretizing
the Laplace term with a variable coefficient:

.. math::
         [-D_x{\alpha} D_x u +au = f]_i{\thinspace .}

Writing this out for a uniform mesh with points :math:`x_i=i\Delta x`,
:math:`i=0,\ldots,N_x`, leads to

.. _Eq:nonlin:alglevel:1D:fd:deq0:

.. math::

    \tag{432}
    -\frac{1}{\Delta x^2}
        \left({\alpha}_{i+\frac{1}{2}}(u_{i+1}-u_i) -
        {\alpha}_{i-\frac{1}{2}}(u_{i}-u_{i-1})\right)
        + au_i = f(u_i){\thinspace .}
        
        

This equation is valid at all the mesh points :math:`i=0,1,\ldots,N_x-1`.
At :math:`i=N_x` we have the Dirichlet condition :math:`u_i=D`.
The only difference from the case with :math:`({\alpha}(x)u^{\prime})^{\prime}` and :math:`f(x)` is that
now :math:`{\alpha}` and :math:`f` are functions of :math:`u` and not only of :math:`x`:
:math:`({\alpha}(u(x))u^{\prime})^{\prime}` and :math:`f(u(x))`.

The quantity :math:`{\alpha}_{i+\frac{1}{2}}`, evaluated between two mesh points,
needs a comment. Since :math:`{\alpha}` depends on :math:`u` and :math:`u` is only known
at the mesh points, we need to express :math:`{\alpha}_{i+\frac{1}{2}}` in
terms of :math:`u_i` and :math:`u_{i+1}`. For this purpose we use an arithmetic
mean, although a harmonic mean is also common in this context if
:math:`{\alpha}` features large jumps.
There are two choices of arithmetic means:

.. _Eq:nonlin:alglevel:1D:fd:dfc:mean:u:

.. math::

    \tag{433}
    {\alpha}_{i+\frac{1}{2}} \approx
        {\alpha}(\frac{1}{2}(u_i + u_{i+1}) =
        [{\alpha}(\overline{u}^x)]^{i+\frac{1}{2}},
        
        

.. _Eq:nonlin:alglevel:1D:fd:dfc:mean:dfc:

.. math::

    \tag{434}
    {\alpha}_{i+\frac{1}{2}} \approx
        \frac{1}{2}({\alpha}(u_i) + {\alpha}(u_{i+1})) = [\overline{{\alpha}(u)}^x]^{i+\frac{1}{2}}
        
        

Equation :ref:`(432) <Eq:nonlin:alglevel:1D:fd:deq0>` with
the latter approximation then looks like

.. math::
        
        -\frac{1}{2\Delta x^2}
        \left(({\alpha}(u_i)+{\alpha}(u_{i+1}))(u_{i+1}-u_i) -
        ({\alpha}(u_{i-1})+{\alpha}(u_{i}))(u_{i}-u_{i-1})\right)\nonumber
        

.. _Eq:nonlin:alglevel:1D:fd:deq:

.. math::

    \tag{435}
    \qquad\qquad + au_i = f(u_i),
        
        

or written more compactly,

.. math::
         [-D_x\overline{{\alpha}}^x D_x u +au = f]_i{\thinspace .}

At mesh point :math:`i=0` we have the boundary condition :math:`{\alpha}(u)u^{\prime}=C`,
which is discretized by

.. math::
         [{\alpha}(u)D_{2x}u = C]_0,

meaning

.. _Eq:nonlin:alglevel:1D:fd:Neumann:x0:

.. math::

    \tag{436}
    {\alpha}(u_0)\frac{u_{1} - u_{-1}}{2\Delta x} = C{\thinspace .}
        
        

The fictitious value :math:`u_{-1}` can be eliminated with the aid
of :ref:`(435) <Eq:nonlin:alglevel:1D:fd:deq>` for :math:`i=0`.
Formally, :ref:`(435) <Eq:nonlin:alglevel:1D:fd:deq>` should be solved with
respect to :math:`u_{i-1}` and that value (for :math:`i=0`) should be inserted in
:ref:`(436) <Eq:nonlin:alglevel:1D:fd:Neumann:x0>`, but it is algebraically
much easier to do it the other way around. Alternatively, one can
use a ghost cell :math:`[-\Delta x,0]` and update the :math:`u_{-1}` value
in the ghost cell according to :ref:`(436) <Eq:nonlin:alglevel:1D:fd:Neumann:x0>`
after every Picard or Newton iteration. Such an approach means that
we use a known :math:`u_{-1}` value in :ref:`(435) <Eq:nonlin:alglevel:1D:fd:deq>`
from the previous iteration.

Solution of algebraic equations
-------------------------------

The structure of the equation system
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The nonlinear algebraic equations :ref:`(435) <Eq:nonlin:alglevel:1D:fd:deq>` are
of the form :math:`A(u)u = b(u)` with

.. math::
        \begin{align*}
        A_{i,i} &= \frac{1}{2\Delta x^2}({\alpha}(u_{i-1}) + 2{\alpha}(u_{i})
        + {\alpha}(u_{i+1})) + a,\\ 
        A_{i,i-1} &= -\frac{1}{2\Delta x^2}({\alpha}(u_{i-1}) + {\alpha}(u_{i})),\\ 
        A_{i,i+1} &= -\frac{1}{2\Delta x^2}({\alpha}(u_{i}) + {\alpha}(u_{i+1})),\\ 
        b_i &= f(u_i){\thinspace .}
        \end{align*}

The matrix :math:`A(u)` is tridiagonal: :math:`A_{i,j}=0` for :math:`j > i+1` and :math:`j < i-1`.

The above expressions are valid for internal mesh points :math:`1\leq i\leq N_x-1`.
For :math:`i=0` we need to express :math:`u_{i-1}=u_{-1}` in terms of :math:`u_1` using
:ref:`(436) <Eq:nonlin:alglevel:1D:fd:Neumann:x0>`:

.. _Eq:nonlin:alglevel:1D:fd:Neumann:x0:um1:

.. math::

    \tag{437}
    u_{-1} = u_1 -\frac{2\Delta x}{{\alpha}(u_0)}C{\thinspace .}
        
        

This value must be inserted in :math:`A_{0,0}`. The expression for :math:`A_{i,i+1}`
applies for :math:`i=0`, and :math:`A_{i,i-1}` does not enter the system when :math:`i=0`.

Regarding the last equation, its form depends on whether we include
the Dirichlet condition :math:`u(L)=D`, meaning :math:`u_{N_x}=D`, in the
nonlinear algebraic equation system or not. Suppose we choose
:math:`(u_0,u_1,\ldots,u_{N_x-1})` as unknowns, later referred to as
*systems without Dirichlet conditions*. The last equation
corresponds to :math:`i=N_x-1`. It involves the boundary value :math:`u_{N_x}`,
which is substituted by :math:`D`. If the unknown vector includes the
boundary value, :math:`(u_0,u_1,\ldots,u_{N_x})`, later referred to as
*system including Dirichlet conditions*, the equation for :math:`i=N_x-1`
just involves the unknown :math:`u_{N_x}`, and the final equation becomes
:math:`u_{N_x}=D`, corresponding to :math:`A_{i,i}=1` and :math:`b_i=D` for :math:`i=N_x`.

Picard iteration          (3)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The obvious Picard iteration scheme is to use previously computed
values of :math:`u_i` in :math:`A(u)` and :math:`b(u)`, as described more in detail in
the section :ref:`nonlin:systems:alg`. With the notation :math:`u^{-}` for the
most recently computed value of :math:`u`, we have the system :math:`F(u)\approx
\hat F(u) = A(u^{-})u - b(u^{-})`, with :math:`F=(F_0,F_1,\ldots,F_m)`,
:math:`u=(u_0,u_1,\ldots,u_m)`.  The index :math:`m` is :math:`N_x` if the system
includes the Dirichlet condition as a separate equation and :math:`N_x-1`
otherwise.  The matrix :math:`A(u^{-})` is tridiagonal, so the solution
procedure is to fill a tridiagonal matrix data structure and the
right-hand side vector with the right numbers and call a Gaussian
elimination routine for tridiagonal linear systems.

[**kam 40**: yapi checks the calculations of the following pages]
Mesh with two cells
~~~~~~~~~~~~~~~~~~~

It helps on the understanding of the details to write out all the
mathematics in a specific
case with a small mesh, say just two cells (:math:`N_x=2`). We use :math:`u^{-}_i`
for the :math:`i`-th component in :math:`u^{-}`.

The starting point is the basic expressions for the
nonlinear equations at mesh point :math:`i=0` and :math:`i=1` are

.. _Eq:nonlin:alglevel:1D:fd:2x2:x0:

.. math::

    \tag{438}
    A_{0,-1}u_{-1} + A_{0,0}u_0 + A_{0,1}u_1 = b_0,
        
        

.. _Eq:nonlin:alglevel:1D:fd:2x2:x1:

.. math::

    \tag{439}
    A_{1,0}u_{0} + A_{1,1}u_1 + A_{1,2}u_2 = b_1{\thinspace .}
        
        

Equation :ref:`(438) <Eq:nonlin:alglevel:1D:fd:2x2:x0>` written out reads

.. math::
        \begin{align*}
        \frac{1}{2\Delta x^2}(& -({\alpha}(u_{-1}) + {\alpha}(u_{0}))u_{-1}\, +\\ 
        & ({\alpha}(u_{-1}) + 2{\alpha}(u_{0}) + {\alpha}(u_{1}))u_0\, -\\ 
        & ({\alpha}(u_{0}) + {\alpha}(u_{1})))u_1 + au_0
        =f(u_0){\thinspace .}
        \end{align*}

We must then replace :math:`u_{-1}` by
:ref:`(437) <Eq:nonlin:alglevel:1D:fd:Neumann:x0:um1>`.
With Picard iteration we get

.. u_{-1} = u_1 -\frac{2\Delta x}{{\alpha}(u_0)}C

.. math::
        \begin{align*}
        \frac{1}{2\Delta x^2}(& -({\alpha}(u^-_{-1}) + 2{\alpha}(u^-_{0})
        + {\alpha}(u^-_{1}))u_1\, +\\ 
        &({\alpha}(u^-_{-1}) + 2{\alpha}(u^-_{0}) + {\alpha}(u^-_{1}))u_0
         + au_0\\ 
        &=f(u^-_0) -
        \frac{1}{{\alpha}(u^-_0)\Delta x}({\alpha}(u^-_{-1}) + {\alpha}(u^-_{0}))C,
        \end{align*}

where

.. math::
         u^-_{-1} = u_1^- -\frac{2\Delta x}{{\alpha}(u^-_0)}C{\thinspace .}

Equation :ref:`(439) <Eq:nonlin:alglevel:1D:fd:2x2:x1>` contains the unknown :math:`u_2`
for which we have a Dirichlet condition. In case we omit the
condition as a separate equation, :ref:`(439) <Eq:nonlin:alglevel:1D:fd:2x2:x1>`
with Picard iteration becomes

.. math::
        \begin{align*}
        \frac{1}{2\Delta x^2}(&-({\alpha}(u^-_{0}) + {\alpha}(u^-_{1}))u_{0}\, + \\ 
        &({\alpha}(u^-_{0}) + 2{\alpha}(u^-_{1}) + {\alpha}(u^-_{2}))u_1\, -\\ 
        &({\alpha}(u^-_{1}) + {\alpha}(u^-_{2})))u_2 + au_1
        =f(u^-_1){\thinspace .}
        \end{align*}

We must now move the :math:`u_2` term to the right-hand side and replace all
occurrences of :math:`u_2` by :math:`D`:

.. math::
        \begin{align*}
        \frac{1}{2\Delta x^2}(&-({\alpha}(u^-_{0}) + {\alpha}(u^-_{1}))u_{0}\, +\\ 
        & ({\alpha}(u^-_{0}) + 2{\alpha}(u^-_{1}) + {\alpha}(D))u_1 + au_1\\ 
        &=f(u^-_1) + \frac{1}{2\Delta x^2}({\alpha}(u^-_{1}) + {\alpha}(D))D{\thinspace .}
        \end{align*}

The two equations can be written as a :math:`2\times 2` system:

.. math::
        
        \left(\begin{array}{cc}
        B_{0,0}& B_{0,1}\\ 
        B_{1,0} & B_{1,1}
        \end{array}\right)
        \left(\begin{array}{c}
        u_0\\ 
        u_1
        \end{array}\right)
        =
        \left(\begin{array}{c}
        d_0\\ 
        d_1
        \end{array}\right),
        

where

.. _Eq:_auto177:

.. math::

    \tag{440}
    B_{0,0} =\frac{1}{2\Delta x^2}({\alpha}(u^-_{-1}) + 2{\alpha}(u^-_{0}) + {\alpha}(u^-_{1}))
        + a
        
        

.. _Eq:_auto178:

.. math::

    \tag{441}
    B_{0,1} =
        -\frac{1}{2\Delta x^2}({\alpha}(u^-_{-1}) + 2{\alpha}(u^-_{0})
        + {\alpha}(u^-_{1})),
        
        

.. _Eq:_auto179:

.. math::

    \tag{442}
    B_{1,0} =
        -\frac{1}{2\Delta x^2}({\alpha}(u^-_{0}) + {\alpha}(u^-_{1})),
        
        

.. _Eq:_auto180:

.. math::

    \tag{443}
    B_{1,1} =
        \frac{1}{2\Delta x^2}({\alpha}(u^-_{0}) + 2{\alpha}(u^-_{1}) + {\alpha}(D)) + a,
        
        

.. _Eq:_auto181:

.. math::

    \tag{444}
    d_0 =
        f(u^-_0) -
        \frac{1}{{\alpha}(u^-_0)\Delta x}({\alpha}(u^-_{-1}) + {\alpha}(u^-_{0}))C,
        
        

.. _Eq:_auto182:

.. math::

    \tag{445}
    d_1 = f(u^-_1) + \frac{1}{2\Delta x^2}({\alpha}(u^-_{1}) + {\alpha}(D))D{\thinspace .}
        
        

The system with the Dirichlet condition becomes

.. math::
        
        \left(\begin{array}{ccc}
        B_{0,0}& B_{0,1} & 0\\ 
        B_{1,0} & B_{1,1} & B_{1,2}\\ 
        0  & 0 & 1
        \end{array}\right)
        \left(\begin{array}{c}
        u_0\\ 
        u_1\\ 
        u_2
        \end{array}\right)
        =
        \left(\begin{array}{c}
        d_0\\ 
        d_1\\ 
        D
        \end{array}\right),
        

with

.. _Eq:_auto183:

.. math::

    \tag{446}
    B_{1,1} =
        \frac{1}{2\Delta x^2}({\alpha}(u^-_{0}) + 2{\alpha}(u^-_{1}) + {\alpha}(u_2)) + a,
        
        

.. _Eq:_auto184:

.. math::

    \tag{447}
    B_{1,2} = -
        \frac{1}{2\Delta x^2}({\alpha}(u^-_{1}) + {\alpha}(u_2))),
        
        

.. _Eq:_auto185:

.. math::

    \tag{448}
    d_1 = f(u^-_1){\thinspace .}
        
        

Other entries are as in the :math:`2\times 2` system.

Newton's method          (4)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The Jacobian must be derived in order to use Newton's method. Here it means
that we need to differentiate :math:`F(u)=A(u)u - b(u)` with respect to
the unknown parameters
:math:`u_0,u_1,\ldots,u_m` (:math:`m=N_x` or :math:`m=N_x-1`, depending on whether the
Dirichlet condition is included in the nonlinear system :math:`F(u)=0` or not).
Nonlinear equation number :math:`i` of :ref:`(435) <Eq:nonlin:alglevel:1D:fd:deq>`
has the structure

.. math::
         F_i = A_{i,i-1}(u_{i-1},u_i)u_{i-1} +
        A_{i,i}(u_{i-1},u_i,u_{i+1})u_i +
        A_{i,i+1}(u_i, u_{i+1})u_{i+1} - b_i(u_i){\thinspace .}

Computing the Jacobian requires careful differentiation. For example,

.. math::
        \begin{align*}
        \frac{\partial}{\partial u_i}(A_{i,i}(u_{i-1},u_i,u_{i+1})u_i) &=
        \frac{\partial A_{i,i}}{\partial u_i}u_i + A_{i,i}
        \frac{\partial u_i}{\partial u_i}\\ 
        &=
        \frac{\partial}{\partial u_i}(
        \frac{1}{2\Delta x^2}({\alpha}(u_{i-1}) + 2{\alpha}(u_{i})
        +{\alpha}(u_{i+1})) + a)u_i +\\ 
        &\quad\frac{1}{2\Delta x^2}({\alpha}(u_{i-1}) + 2{\alpha}(u_{i})
        +{\alpha}(u_{i+1})) + a\\ 
        &= \frac{1}{2\Delta x^2}(2{\alpha}^\prime (u_i)u_i
        +{\alpha}(u_{i-1}) + 2{\alpha}(u_{i})
        +{\alpha}(u_{i+1})) + a{\thinspace .}
        \end{align*}

The complete Jacobian becomes

.. math::
        \begin{align*}
        J_{i,i} &= \frac{\partial F_i}{\partial u_i}
        = \frac{\partial A_{i,i-1}}{\partial u_i}u_{i-1}
        + \frac{\partial A_{i,i}}{\partial u_i}u_i
        + A_{i,i}
        + \frac{\partial A_{i,i+1}}{\partial u_i}u_{i+1}
        - \frac{\partial b_i}{\partial u_{i}}\\ 
        &=
        \frac{1}{2\Delta x^2}(
        -{\alpha}^{\prime}(u_i)u_{i-1}
        +2{\alpha}^{\prime}(u_i)u_{i}
        +{\alpha}(u_{i-1}) + 2{\alpha}(u_i) + {\alpha}(u_{i+1})) +\\ 
        &\quad a
        -\frac{1}{2\Delta x^2}{\alpha}^{\prime}(u_{i})u_{i+1}
        - b^{\prime}(u_i),\\ 
        J_{i,i-1} &= \frac{\partial F_i}{\partial u_{i-1}}
        = \frac{\partial A_{i,i-1}}{\partial u_{i-1}}u_{i-1}
        + A_{i-1,i}
        + \frac{\partial A_{i,i}}{\partial u_{i-1}}u_i
        - \frac{\partial b_i}{\partial u_{i-1}}\\ 
        &=
        \frac{1}{2\Delta x^2}(
        -{\alpha}^{\prime}(u_{i-1})u_{i-1} - ({\alpha}(u_{i-1}) + {\alpha}(u_i))
        + {\alpha}^{\prime}(u_{i-1})u_i),\\ 
        J_{i,i+1} &= \frac{\partial A_{i,i+1}}{\partial u_{i-1}}u_{i+1}
        + A_{i+1,i} +
        \frac{\partial A_{i,i}}{\partial u_{i+1}}u_i
        - \frac{\partial b_i}{\partial u_{i+1}}\\ 
        &=\frac{1}{2\Delta x^2}(
        -{\alpha}^{\prime}(u_{i+1})u_{i+1} - ({\alpha}(u_{i}) + {\alpha}(u_{i+1}))
        + {\alpha}^{\prime}(u_{i+1})u_i)
        {\thinspace .}
        \end{align*}

[**kam 41**: check completely!!]

The explicit expression for nonlinear equation number :math:`i`,
:math:`F_i(u_0,u_1,\ldots)`, arises from moving the :math:`f(u_i)` term in
:ref:`(435) <Eq:nonlin:alglevel:1D:fd:deq>` to the left-hand side:

.. math::
        
        F_i = -\frac{1}{2\Delta x^2}
        \left(({\alpha}(u_i)+{\alpha}(u_{i+1}))(u_{i+1}-u_i) -
        ({\alpha}(u_{i-1})+{\alpha}(u_{i}))(u_{i}-u_{i-1})\right)\nonumber
        

.. _Eq:nonlin:alglevel:1D:fd:deq2:

.. math::

    \tag{449}
    \qquad\qquad + au_i - f(u_i) = 0{\thinspace .}
        
        

At the boundary point :math:`i=0`, :math:`u_{-1}` must be replaced using
the formula :ref:`(437) <Eq:nonlin:alglevel:1D:fd:Neumann:x0:um1>`.
When the Dirichlet condition at :math:`i=N_x` is not a part of the
equation system, the last equation :math:`F_m=0` for :math:`m=N_x-1`
involves the quantity :math:`u_{N_x-1}` which must be replaced by :math:`D`.
If :math:`u_{N_x}` is treated as an unknown in the system, the
last equation :math:`F_m=0` has :math:`m=N_x` and reads

.. math::
         F_{N_x}(u_0,\ldots,u_{N_x}) = u_{N_x} - D = 0{\thinspace .}

Similar replacement of :math:`u_{-1}` and :math:`u_{N_x}` must be done in
the Jacobian for the first and last row. When :math:`u_{N_x}`
is included as an unknown, the last row in the Jacobian
must help implement the condition :math:`\delta u_{N_x}=0`, since
we assume that :math:`u` contains the right Dirichlet value
at the beginning of the iteration (:math:`u_{N_x}=D`), and then
the Newton update should be zero for :math:`i=0`, i.e., :math:`\delta u_{N_x}=0`.
This also forces the right-hand side to be :math:`b_i=0`, :math:`i=N_x`.

We have seen, and can see from the present example, that the
linear system in Newton's method contains all the terms present
in the system that arises in the Picard iteration method.
The extra terms in Newton's method can be multiplied by a factor
such that it is easy to program one linear system and set this
factor to 0 or 1 to generate the Picard or Newton system.

.. Remark: Neumann cond at x=L and Dirichlet at x=0 leads to different

.. numbering of unknowns and u at mesh points. Must address this

.. in a remark and treat it properly in diffu.

