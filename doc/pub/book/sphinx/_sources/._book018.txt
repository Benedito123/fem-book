.. !split

Exercises          (3)
======================

.. examples on model4 with 1, x, x^2 etc. Show that N=2 recovers

.. the exact solution

.. heat conduction in the ground with radioactivity, need good  model, not

.. just the old one

.. string with load

.. hanging cable, see ideas/5620 articles about that (nonlinear)

.. --- begin exercise ---

.. _fem:deq:exer:BVP1D:class:

Exercise 25: Refactor functions into a more general class
---------------------------------------------------------

The section :ref:`fem:deq:1D:models:simple` lists three functions for
computing the analytical solution of some simple model problems. There
is quite some repetitive code, suggesting that the functions can
benefit from being refactored into a class hierarchy, where the super
class solves :math:`-(a(x)u'(x))'=f(x)` and where subclasses define the
equations for the boundary conditions in a model. Make a method for
returning the residual in the differential equation and the boundary
conditions when the solution is inserted in these equations. Create a
test function that verifies that all three residuals vanish for each
of the model problems in the section :ref:`fem:deq:1D:models:simple`.  Also
make a method that returns the solution either as ``sympy`` expression
or as a string in LaTeX format.  Add a fourth subclass for the problem
:math:`-(au')'=f` with a Robin boundary condition:

.. math::
         u(0)=0,\quad -u'(L) = C(u - D){\thinspace .}

Demonstrate the use of this subclass for the case :math:`f=0` and :math:`a=\sqrt{1+x}`.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

Filename: ``uxx_f_sympy_class``.

.. --- end exercise ---

.. --- begin exercise ---

.. _fem:deq:exer:tension:cable:

Exercise 26: Compute the deflection of a cable with sine functions
------------------------------------------------------------------

A hanging cable of length :math:`L`
with significant tension :math:`T` has a deflection :math:`w(x)`
governed by

.. math::
        
        T w''(x) = \ell(x),
        

where :math:`\ell(x)` the vertical load per unit length.
The cable is fixed at :math:`x=0` and :math:`x=L` so the boundary conditions become
:math:`w(0)=w(L)=0`. The deflection :math:`w` is positive upwards, and :math:`\ell` is
positive when it acts downwards.

If we assume a constant load :math:`\ell(x)=\hbox{const}`,
the solution is expected to be symmetric around :math:`x=L/2`. For a function
:math:`w(x)` that is symmetric around some point :math:`x_0`, it means that
:math:`w(x_0-h) = w(x_0+h)`, and then :math:`w'(x_0)=\lim_{h\rightarrow 0}(w(x_0+h)-
w(x_0-h))/(2h)=0`. We can therefore utilize symmetry to halve the domain.
We then seek :math:`w(x)` in :math:`[0,L/2]` with boundary conditions :math:`w(0)=0` and
:math:`w'(L/2)=0`.

The problem can be scaled by introducing dimensionless  variables,

.. math::
         \bar x = \frac{x}{L/2},\quad \bar u = \frac{w}{w_c},

where :math:`w_c` is a characteristic size of :math:`w`.
Inserted in the problem for :math:`w`,

.. math::
         \frac{4Tw_c}{L^{2}}\frac{d^2\bar u}{d\bar x^2} = \ell\ (= \hbox{const}){\thinspace .}

A desire is to have :math:`u` and its derivatives about unity, so
choosing :math:`w_c` such that :math:`|d^2\bar u/d\bar x^2|=1` is an idea.
Then :math:`w_c=\frac{1}{4}\ell L^2/T`, and the problem for the scaled vertical
deflection :math:`u` becomes

.. math::
        
        u'' = 1,\quad x\in (0,1),\quad u(0)=0,\ u'(1)=0{\thinspace .}
        

Observe that there are no physical parameters in this scaled problem.
From now on we have for convenience
renamed :math:`x` to be the scaled quantity :math:`\bar x`.

**a)**
Find the exact solution for the deflection :math:`u`.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**b)**
A possible function space is spanned by :math:`{\psi}_i=\sin ((2i+1)\pi x/2)`,
:math:`i=0,\ldots,N`. These functions
fulfill the necessary condition :math:`{\psi}_i(0)=0`,
but they also fulfill :math:`{\psi}_i'(1)=0` such that both boundary
conditions are fulfilled by the expansion :math:`u=\sum_jc_j{\varphi}_j`.

Use a Galerkin and a least squares method to find the coefficients
:math:`c_j` in :math:`u(x)=\sum_j c_j{\psi}_j`. Find how fast the coefficients
decrease in magnitude by looking at :math:`c_j/c_{j-1}`.
Find the error in the maximum deflection at :math:`x=1` when only one
basis function is used (:math:`N=0`).

.. --- begin hint in exercise ---

**Hint.**
In this case, where the basis functions and their derivatives are
orthogonal, it is easiest to set up the calculations by hand and
use ``sympy`` to help out with the integrals.

.. --- end hint in exercise ---

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**c)**
Visualize the solutions in b) for :math:`N=0,1,20`.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**d)**
The functions in b) were selected such that they fulfill the
condition :math:`{\psi}'(1)=0`. However, in the Galerkin method, where we
integrate by parts, the condition :math:`u'(1)=0` is incorporated in the
variational form. This leads to the idea of just choosing a simpler
basis, namely "all" sine functions :math:`{\psi}_i = \sin((i+1)\frac{\pi x}{2})`.
Will the method adjust the coefficient such that the additional
functions compared with those in b) get vanishing coefficients? Or
will the additional basis functions improve the solution?
Use Galerkin's method.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**e)**
Now we drop the symmetry condition at :math:`x=1` and extend the domain to
:math:`[0,2]` such that it covers the entire (scaled) physical cable. The
problem now reads

.. math::
         u'' = 1,\quad x\in (0,2),\quad u(0)=u(2)=0{\thinspace .}

This time we need basis functions that are zero at :math:`x=0` and :math:`x=2`.
The set :math:`\sin((i+1)\frac{\pi x}{2})` from d) is a candidate since
they vanish :math:`x=2` for any :math:`i`. Compute the approximation in this case.
Why is this approximation without the problem that this set of
basis functions introduced in d)?

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

.. BIG point: use polynomials, without integration by parts we cannot

.. handle the boundary condition.

Filename: ``cable_sin``.

.. --- end exercise ---

.. --- begin exercise ---

.. _fem:deq:exer:tension:cable_xn:

Exercise 27: Compute the deflection of a cable with power functions
-------------------------------------------------------------------

**a)**
Repeat :ref:`fem:deq:exer:tension:cable` b), but work with
the space

.. math::
         V = \hbox{span}\{x, x^2, x^3, x^4, \ldots\}{\thinspace .} 

Choose the dimension of :math:`V` to be 4 and observe that the exact solution
is recovered by the Galerkin method.

.. --- begin hint in exercise ---

**Hint.**
Use the ``solver`` function from ``varform1D.py``.

.. --- end hint in exercise ---

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**b)**
What happens if we use a least squares method for this problem with
the basis in a)?

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

Filename: ``cable_xn``.

.. --- end exercise ---

.. --- begin exercise ---

.. _fem:deq:exer:intg:parts:

Exercise 28: Check integration by parts
---------------------------------------

Consider the Galerkin method for the problem involving :math:`u`
in :ref:`fem:deq:exer:tension:cable`.
Show that the formulas for :math:`c_j` are independent of whether we perform
integration by parts or not.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

Filename: ``cable_integr_by_parts``.

.. --- end exercise ---

