.. !split

.. _nonlin:exer:

Exercises          (7)
======================

.. --- begin exercise ---

.. _nonlin:exer:lin:vs:nonlin:

Problem 41: Determine if equations are nonlinear or not
-------------------------------------------------------

Classify each term in the following equations as linear or nonlinear.
Assume that :math:`u`, :math:`\boldsymbol{u}`, and :math:`p` are unknown functions and that
all other symbols are known quantities.

1. :math:`mu^{\prime\prime} + \beta |u^{\prime}|u^{\prime} + cu = F(t)`

2. :math:`u_t = {\alpha} u_{xx}`

3. :math:`u_{tt} = c^2\nabla^2 u`

4. :math:`u_t = \nabla\cdot({\alpha}(u)\nabla u) + f(x,y)`

5. :math:`u_t + f(u)_x = 0`

6. :math:`\boldsymbol{u}_t + \boldsymbol{u}\cdot\nabla \boldsymbol{u} = -\nabla p + r\nabla^2\boldsymbol{u}`, :math:`\nabla\cdot\boldsymbol{u} = 0`
   (:math:`\boldsymbol{u}` is a vector field)

7. :math:`u^{\prime} = f(u,t)`

8. :math:`\nabla^2 u = \lambda e^u`

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

Filename: ``nonlinear_vs_linear``.

.. --- end exercise ---

.. --- begin exercise ---

.. _nonlin:exer:logistic:gen:

Exercise 42: Derive and investigate a generalized logistic model
----------------------------------------------------------------

The logistic model for population growth is derived by assuming
a nonlinear growth rate,

.. _Eq:nonlin:exer:logistic:gen:eq:

.. math::

    \tag{450}
    u^{\prime} = a(u)u,\quad u(0)=I,
        
        

and the logistic model arises from the simplest possible choice of
:math:`a(u)`: :math:`r(u)=\varrho(1 - u/M)`, where :math:`M` is the maximum value of :math:`u` that
the environment can sustain, and :math:`\varrho` is the growth under
unlimited access to resources (as in the beginning when :math:`u` is small).
The idea is that :math:`a(u)\sim\varrho` when :math:`u` is small and that
:math:`a(t)\rightarrow 0` as :math:`u\rightarrow M`.

An :math:`a(u)` that generalizes the linear choice is the polynomial form

.. _Eq:nonlin:exer:logistic:gen:r1:

.. math::

    \tag{451}
    a(u) = \varrho(1-u/M)^p,
        
        

where :math:`p>0` is some real number.

**a)**
Formulate a Forward Euler, Backward Euler, and a Crank-Nicolson
scheme for :ref:`(450) <Eq:nonlin:exer:logistic:gen:eq>`.

.. --- begin hint in exercise ---

**Hint.**
Use a geometric mean approximation in the Crank-Nicolson scheme:
:math:`[a(u)u]^{n+1/2}\approx a(u^n)u^{n+1}`.

.. --- end hint in exercise ---

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**b)**
Formulate Picard and Newton iteration for the Backward Euler scheme in a).

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**c)**
Implement the numerical solution methods from a) and b).
Use `logistic.py <http://tinyurl.com/znpudbt/logistic.py>`__ to compare the case
:math:`p=1` and the choice :ref:`(451) <Eq:nonlin:exer:logistic:gen:r1>`.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**d)**
Implement unit tests that check the asymptotic limit of the solutions:
:math:`u\rightarrow M` as :math:`t\rightarrow\infty`.

.. --- begin hint in exercise ---

**Hint.**
You need to experiment to find what "infinite time" is
(increases substantially with :math:`p`) and what the
appropriate tolerance is for testing the asymptotic limit.

.. --- end hint in exercise ---

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**e)**
Perform experiments with Newton and Picard iteration for
the model :ref:`(451) <Eq:nonlin:exer:logistic:gen:r1>`.
See how sensitive
the number of iterations is to :math:`\Delta t` and :math:`p`.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

.. ===== Exercise: Derive a relaxation formula =====

Filename: ``logistic_p``.

.. --- end exercise ---

.. --- begin exercise ---

.. _nonlin:exer:Newton:problems1:

Problem 43: Experience the behavior of Newton's method
------------------------------------------------------

[**kam 44**: where do we find this demo]

The program `Newton_demo.py <http://tinyurl.com/znpudbt/Newton_demo.py>`__ illustrates
graphically each step in Newton's method and is run like

[**kam 45**: where is this program?]

.. code-block:: text

    Terminal> python Newton_demo.py f dfdx x0 xmin xmax

Use this program to investigate potential
problems with Newton's method when solving :math:`e^{-0.5x^2}\cos (\pi x)=0`.
Try a starting point :math:`x_0=0.8` and :math:`x_0=0.85` and watch the different
behavior. Just run

.. code-block:: text

    Terminal>  python Newton_demo.py '0.2 + exp(-0.5*x**2)*cos(pi*x)' \ 
               '-x*exp(-x**2)*cos(pi*x) - pi*exp(-x**2)*sin(pi*x)' \ 
               0.85 -3 3

and repeat with 0.85 replaced by 0.8.

.. --- end exercise ---

.. --- begin exercise ---

.. _nonlin:exer:vib:Jacobian:

Problem 44: Compute the Jacobian of a :math:`2\times 2` system
--------------------------------------------------------------

Write up the system :ref:`(397) <Eq:nonlin:ode:generic:sys:pendulum:u0>`-:ref:`(398) <Eq:nonlin:ode:generic:sys:pendulum:u1>` in the form :math:`F(u)=0`, :math:`F=(F_0,F_1)`, :math:`u=(u_0,u_1)`,
and compute the Jacobian :math:`J_{i,j}=\partial F_i/\partial u_j`.

.. --- end exercise ---

.. --- begin exercise ---

.. _nonlin:exer:vib:geometric:mean:

Problem 45: Solve nonlinear equations arising from a vibration ODE
------------------------------------------------------------------

Consider a nonlinear vibration problem

.. _Eq:_auto186:

.. math::

    \tag{452}
    mu^{\prime\prime} + bu^{\prime}|u^{\prime}| + s(u) = F(t),
        
        

where :math:`m>0` is a constant, :math:`b\geq 0` is a constant, :math:`s(u)` a possibly
nonlinear function of :math:`u`, and :math:`F(t)` is a prescribed function. Such
models arise from Newton's second law of motion in mechanical
vibration problems where :math:`s(u)` is a spring or restoring force,
:math:`mu^{\prime\prime}` is mass times acceleration, and
:math:`bu^{\prime}|u^{\prime}|` models water or air drag.

**a)**
Rewrite the equation for :math:`u` as a system of two first-order ODEs, and
discretize this system by a Crank-Nicolson (centered difference)
method. With :math:`v=u^\prime`, we get a nonlinear term
:math:`v^{n+\frac{1}{2}}|v^{n+\frac{1}{2}}|`. Use a geometric
average for :math:`v^{n+\frac{1}{2}}`.

**b)**
Formulate a Picard iteration method to solve the system of nonlinear
algebraic equations.

**c)**
Explain how to apply Newton's method to solve the nonlinear equations
at each time level. Derive expressions for the Jacobian and the
right-hand side in each Newton iteration.

.. 2DO: b) Newmark scheme

.. derive it logically and connect it to the centered diff scheme

.. ma + bv|v| + s(u) = F(t), v'=a, u'=v (staggered is natural,

.. v at n+1/2 and a and u at n). Should be in vib first

Filename: ``nonlin_vib``.

.. --- end exercise ---

.. --- begin exercise ---

.. _nonlin:exer:products:arith:mean:

Exercise 46: Find the truncation error of arithmetic mean of products
---------------------------------------------------------------------

In the section :ref:`nonlin:pdelevel:Picard:CN` we introduce alternative
arithmetic means of a product. Say the product is :math:`P(t)Q(t)` evaluated
at :math:`t=t_{n+\frac{1}{2}}`. The exact value is

.. math::
         [PQ]^{n+\frac{1}{2}} = P^{n+\frac{1}{2}}Q^{n+\frac{1}{2}} 

There are two obvious candidates for evaluating :math:`[PQ]^{n+\frac{1}{2}}`
as a mean of values of :math:`P` and :math:`Q` at :math:`t_n` and :math:`t_{n+1}`. Either
we can take the arithmetic mean of each factor :math:`P` and :math:`Q`,

.. _Eq:nonlin:exer:products:arith:mean:f:

.. math::

    \tag{453}
    [PQ]^{n+\frac{1}{2}} \approx \frac{1}{2}(P^n + P^{n+1})\frac{1}{2}(Q^n + Q^{n+1}),
        
        

or we can take the arithmetic mean of the product :math:`PQ`:

.. _Eq:nonlin:exer:products:arith:mean:p:

.. math::

    \tag{454}
    [PQ]^{n+\frac{1}{2}} \approx \frac{1}{2}(P^nQ^n + P^{n+1}Q^{n+1}){\thinspace .}
        
        

The arithmetic average
of :math:`P(t_{n+\frac{1}{2}})` is :math:`{\mathcal{O}(\Delta t^2)}`:

.. math::
         P(t_{n+\frac{1}{2}}) = \frac{1}{2}(P^n + P^{n+1}) +{\mathcal{O}(\Delta t^2)}{\thinspace .}

A fundamental question is whether :ref:`(453) <Eq:nonlin:exer:products:arith:mean:f>`
and :ref:`(454) <Eq:nonlin:exer:products:arith:mean:p>` have different
orders of accuracy in :math:`\Delta t = t_{n+1}-t_n`. To investigate
this question, expand quantities at :math:`t_{n+1}` and :math:`t_n` in
Taylor series around :math:`t_{n+\frac{1}{2}}`, and subtract the true
value :math:`[PQ]^{n+\frac{1}{2}}` from the approximations
:ref:`(453) <Eq:nonlin:exer:products:arith:mean:f>` and
:ref:`(454) <Eq:nonlin:exer:products:arith:mean:p>` to see what the
order of the error terms are.

.. --- begin hint in exercise ---

**Hint.**
You may explore ``sympy`` for carrying out the tedious calculations.
A general Taylor series expansion of :math:`P(t+\frac{1}{2}\Delta t)` around :math:`t`
involving just a general function :math:`P(t)` can be
created as follows:

.. code-block:: python

    >>> from sympy import *
    >>> t, dt = symbols('t dt')
    >>> P = symbols('P', cls=Function)
    >>> P(t).series(t, 0, 4)
    P(0) + t*Subs(Derivative(P(_x), _x), (_x,), (0,)) +
    t**2*Subs(Derivative(P(_x), _x, _x), (_x,), (0,))/2 +
    t**3*Subs(Derivative(P(_x), _x, _x, _x), (_x,), (0,))/6 + O(t**4)
    >>> P_p = P(t).series(t, 0, 4).subs(t, dt/2)
    >>> P_p
    P(0) + dt*Subs(Derivative(P(_x), _x), (_x,), (0,))/2 +
    dt**2*Subs(Derivative(P(_x), _x, _x), (_x,), (0,))/8 +
    dt**3*Subs(Derivative(P(_x), _x, _x, _x), (_x,), (0,))/48 + O(dt**4)

The error of the arithmetic mean, :math:`\frac{1}{2}(P(-\frac{1}{2}\Delta t)
+ P(-\frac{1}{2}\Delta t))` for :math:`t=0` is then

.. code-block:: python

    >>> P_m = P(t).series(t, 0, 4).subs(t, -dt/2)
    >>> mean = Rational(1,2)*(P_m + P_p)
    >>> error = simplify(expand(mean) - P(0))
    >>> error
    dt**2*Subs(Derivative(P(_x), _x, _x), (_x,), (0,))/8 + O(dt**4)

Use these examples to investigate the error of
:ref:`(453) <Eq:nonlin:exer:products:arith:mean:f>` and
:ref:`(454) <Eq:nonlin:exer:products:arith:mean:p>` for :math:`n=0`. (Choosing :math:`n=0`
is necessary for not making the expressions too complicated for ``sympy``,
but there is of course no lack of generality by using :math:`n=0` rather
than an arbitrary :math:`n` - the main point is the product and addition
of Taylor series.)

.. --- end hint in exercise ---

Filename: ``product_arith_mean``.

.. --- end exercise ---

.. --- begin exercise ---

.. _nonlin:exer:Newton:linear:

Problem 47: Newton's method for linear problems
-----------------------------------------------

Suppose we have a linear system :math:`F(u) = Au- b=0`. Apply Newton's method
to this system, and show that the method converges in one iteration.
Filename: ``Newton_linear``.

.. --- end exercise ---

.. --- begin exercise ---

.. _nonlin:exer:1D:1pu2:fem:

Exercise 48: Discretize a 1D problem with a nonlinear coefficient
-----------------------------------------------------------------

We consider the problem

.. _Eq:nonlin:exer:1D:1pu2:fem:pde:

.. math::

    \tag{455}
    ((1 + u^2)u^{\prime})^{\prime} = 1,\quad x\in (0,1),\quad u(0)=u(1)=0{\thinspace .}
        
        

Discretize :ref:`(455) <Eq:nonlin:exer:1D:1pu2:fem:pde>` by a centered
finite difference method on a uniform mesh.
Filename: ``nonlin_1D_coeff_discretize``.

.. --- end exercise ---

.. --- begin exercise ---

.. _nonlin:exer:1D:1pu2:PicardNewton:

Exercise 49: Linearize a 1D problem with a nonlinear coefficient
----------------------------------------------------------------

We have a two-point boundary value problem

.. _Eq:nonlin:exer:1D:1pu2:PicardNewton:pde:

.. math::

    \tag{456}
    ((1 + u^2)u^{\prime})^{\prime} = 1,\quad x\in (0,1),\quad u(0)=u(1)=0{\thinspace .}
        
        

**a)**
Construct a Picard iteration method for :ref:`(456) <Eq:nonlin:exer:1D:1pu2:PicardNewton:pde>`
without discretizing in space.

**b)**
Apply Newton's method to :ref:`(456) <Eq:nonlin:exer:1D:1pu2:PicardNewton:pde>`
without discretizing in space.

**c)**
Discretize :ref:`(456) <Eq:nonlin:exer:1D:1pu2:PicardNewton:pde>` by a centered finite
difference scheme. Construct a Picard method for the resulting
system of nonlinear algebraic equations.

**d)**
Discretize :ref:`(456) <Eq:nonlin:exer:1D:1pu2:PicardNewton:pde>` by a centered finite
difference scheme. Define the system of nonlinear algebraic equations,
calculate the Jacobian, and set up Newton's method for solving the system.

Filename: ``nonlin_1D_coeff_linearize``.

.. --- end exercise ---

.. --- begin exercise ---

.. _nonlin:exer:1D:fu:discretize:fd:

Problem 50: Finite differences for the 1D Bratu problem
-------------------------------------------------------

We address the so-called Bratu problem

.. _Eq:nonlin:exer:1D:fu:discretize:fd:pde:

.. math::

    \tag{457}
    u^{\prime\prime} + \lambda e^u=0,\quad x\in (0,1),\quad u(0)=u(1)=0,
        
        

where :math:`\lambda` is a given parameter and :math:`u` is a function of :math:`x`.
This is a widely used model problem for studying numerical
methods for nonlinear differential equations.
The problem :ref:`(457) <Eq:nonlin:exer:1D:fu:discretize:fd:pde>` has an
exact solution

.. math::
         {u_{\small\mbox{e}}}(x) = -2\ln\left(\frac{\cosh((x-\frac{1}{2})\theta/2)}{\cosh(\theta/4)}\right),

where :math:`\theta` solves

.. math::
         \theta = \sqrt{2\lambda}\cosh(\theta/4){\thinspace .}

There are two solutions of :ref:`(457) <Eq:nonlin:exer:1D:fu:discretize:fd:pde>` for
:math:`0<\lambda <\lambda_c` and no solution for :math:`\lambda >\lambda_c`.
For :math:`\lambda = \lambda_c` there is one unique solution. The critical
value :math:`\lambda_c` solves

.. math::
         1 = \sqrt{2\lambda_c}\frac{1}{4}\sinh(\theta(\lambda_c)/4){\thinspace .}

A numerical value is :math:`\lambda_c = 3.513830719`.

**a)**
Discretize :ref:`(457) <Eq:nonlin:exer:1D:fu:discretize:fd:pde>` by a
centered finite difference method.

**b)**
Set up the nonlinear equations :math:`F_i(u_0,u_1,\ldots,u_{N_x})=0`
from a). Calculate the associated Jacobian.

**c)**
Implement a solver that can compute :math:`u(x)` using Newton's method.
Plot the error as a function of :math:`x` in each iteration.

**d)**
Investigate whether Newton's method gives second-order convergence
by computing
:math:`|| {u_{\small\mbox{e}}} - u||/||{u_{\small\mbox{e}}} - u^{-}||^2`
in each iteration, where :math:`u` is solution in the current iteration and
:math:`u^{-}` is the solution in the previous iteration.

Filename: ``nonlin_1D_Bratu_fd``.

.. --- end exercise ---

.. --- begin exercise ---

.. _nonlin:exer:1D:heat:nonlinear:fdm:

Exercise 51: Discretize a nonlinear 1D heat conduction PDE by finite differences
--------------------------------------------------------------------------------

We address the 1D heat conduction PDE

.. math::
         \varrho c(T) T_t = (k(T)T_x)_x,

for :math:`x\in [0,L]`,
where :math:`\varrho` is the density of the solid material, :math:`c(T)` is
the heat capacity, :math:`T` is the temperature, and :math:`k(T)` is the
heat conduction coefficient. :math:`T(x,0)=I(x)`, and ends are
subject to a cooling law:

.. math::
         k(T)T_x|_{x=0} = h(T)(T-T_s),\quad -k(T)T_x|_{x=L}=h(T)(T-T_s),

where :math:`h(T)` is a heat transfer coefficient and :math:`T_s` is the
given surrounding temperature.

**a)**
Discretize this PDE in time using either a
Backward Euler or Crank-Nicolson scheme.

**b)**
Formulate a Picard iteration method for the time-discrete problem
(i.e., an iteration method before discretizing in space).

**c)**
Formulate a Newton method for the time-discrete problem in b).

**d)**
Discretize the PDE by a finite difference method in space.
Derive the matrix and right-hand side of a Picard iteration method applied
to the space-time discretized PDE.

**e)**
Derive the matrix and right-hand side of a Newton method applied
to the discretized PDE in d).

Filename: ``nonlin_1D_heat_FD``.

.. --- end exercise ---

.. --- begin exercise ---

.. _nonlin:exer:grad:pow:term:

Exercise 52: Differentiate a highly nonlinear term
--------------------------------------------------

The operator :math:`\nabla\cdot({\alpha}(u)\nabla u)` with
:math:`{\alpha}(u) = |\nabla u|^q` appears in several physical problems,
especially flow of Non-Newtonian fluids. The expression :math:`|\nabla u|`
is defined as the Euclidean norm of a vector:
:math:`|\nabla u|^2 = \nabla u \cdot \nabla u`.
In a Newton method one
has to carry out the differentiation :math:`\partial{\alpha}(u)/\partial c_j`,
for :math:`u=\sum_kc_k{\psi}_k`. Show that

.. math::
         {\partial\over\partial u_j} |\nabla u|^q =
        q|\nabla  u|^{q-2}\nabla u\cdot
        \nabla{\psi}_j{\thinspace .} 

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

Filename: ``nonlin_differentiate``.

.. --- end exercise ---

.. --- begin exercise ---

.. _nonlin:exer:2D:heat:nonlinear:fd:

Exercise 53: Crank-Nicolson for a nonlinear 3D diffusion equation
-----------------------------------------------------------------

Redo the section :ref:`nonlin:alglevel:dD:fd` when a Crank-Nicolson scheme
is used to discretize the equations in time and the problem is
formulated for three spatial dimensions.

.. --- begin hint in exercise ---

**Hint.**
Express the Jacobian as :math:`J_{i,j,k,r,s,t} = \partial F_{i,j,k}/\partial u_{r,s,t}` and observe, as in the 2D case, that :math:`J_{i,j,k,r,s,t}` is very sparse:
:math:`J_{i,j,k,r,s,t}\neq 0` only for :math:`r=i\pm i`, :math:`s=j\pm 1`, and :math:`t=k\pm 1`
as well as :math:`r=i`, :math:`s=j`, and :math:`t=k`.

.. --- end hint in exercise ---

Filename: ``nonlin_heat_FD_CN_2D``.

.. --- end exercise ---

.. --- begin exercise ---

.. _nonlin:exer:sparsity:Jacobian:

Exercise 54: Find the sparsity of the Jacobian
----------------------------------------------

Consider a typical nonlinear Laplace term like
:math:`\nabla\cdot{\alpha}(u)\nabla u` discretized by centered finite differences.
Explain why the Jacobian corresponding to this term has the same
sparsity pattern as the matrix associated with the corresponding linear
term :math:`{\alpha}\nabla^2 u`.

.. --- begin hint in exercise ---

**Hint.**
Set up the unknowns that enter the difference equation at a
point :math:`(i,j)` in 2D or :math:`(i,j,k)` in 3D, and identify the
nonzero entries of the Jacobian that can arise from such a type
of difference equation.

.. --- end hint in exercise ---

Filename: ``nonlin_sparsity_Jacobian``.

.. --- end exercise ---

.. --- begin exercise ---

.. _nonlin:exer:continuation:1DnNflow:

Problem 55: Investigate a 1D problem with a continuation method
---------------------------------------------------------------

.. index:: continuation method

Flow of a pseudo-plastic power-law fluid between two flat plates can be
modeled by

.. math::
         \frac{d}{dx}\left(\mu_0\left\vert\frac{du}{dx}\right\vert^{n-1}
        \frac{du}{dx}\right) = -\beta,\quad u^{\prime}(0)=0,\ u(H) = 0,

where :math:`\beta>0` and :math:`\mu_0>0` are constants.
A target value of :math:`n` may be :math:`n=0.2`.

**a)**
Formulate a Picard iteration method directly for the differential
equation problem.

**b)**
Perform a finite difference discretization of the problem in
each Picard iteration. Implement a solver that can compute :math:`u`
on a mesh. Verify that the solver gives an exact solution for :math:`n=1`
on a uniform mesh regardless of the cell size.

**c)**
Given a sequence of decreasing :math:`n` values, solve the problem for each
:math:`n` using the solution for the previous :math:`n` as initial guess for
the Picard iteration. This is called a continuation method.
Experiment with :math:`n=(1,0.6,0.2)` and :math:`n=(1,0.9,0.8,\ldots,0.2)`
and make a table of the number of Picard iterations versus :math:`n`.

**d)**
Derive a Newton method at the differential equation level and
discretize the resulting linear equations in each Newton iteration
with the finite difference method.

**e)**
Investigate if Newton's method has better convergence properties than
Picard iteration, both in combination with a continuation method.

.. --- end exercise ---

.. _nonlin:app:fem_vs_fdm:

Symbolic nonlinear finite element equations
===========================================

The integrals in nonlinear finite element equations are computed
by numerical integration rules in computer programs, so the
formulas for the variational form is directly transferred to numbers.
It is of interest to understand the nature of the system of difference equations
that arises from the finite element method in nonlinear problems and
to compare with corresponding expressions arising from finite difference
discretization. We shall dive into this problem here. To see the
structure of the difference equations implied by the finite element method,
we have to find symbolic expressions for the integrals, and this is
extremely difficult since the integrals involve the unknown function
in nonlinear problems. However, there are some techniques that allow
us to approximate the integrals and work out symbolic formulas that
can compared with their finite difference counterparts.

We shall address the 1D model problem :ref:`(429) <Eq:nonlin:alglevel:1D:pde>` from
the beginning of the section :ref:`nonlin:alglevel:1D`.
The finite difference discretization is shown in the section :ref:`nonlin:alglevel:1D:fd`, while the variational form based on
Galerkin's method is developed in the section :ref:`nonlin:alglevel:1D:fe`.
We build directly on formulas developed in the latter section.

.. _nonlin:alglevel:1D:fe_basis:

Finite element basis functions          (3)
-------------------------------------------

Introduction of finite element basis functions :math:`{\varphi}_i` means setting

.. math::
         {\psi}_i = {\varphi}_{\nu(i)},\quad i\in{\mathcal{I}_s},

where degree of freedom number :math:`\nu(i)` in the mesh corresponds to
unknown number :math:`i` (:math:`c_i`).
In the present example, we use all the basis functions except the
last at :math:`i=N_n-1`, i.e., :math:`{\mathcal{I}_s} = \{0,\ldots,N_n-2\}`, and :math:`\nu(j)=j`.
The expansion of :math:`u` can be taken as

.. math::
         u = D + \sum_{j\in{\mathcal{I}_s}} c_j{\varphi}_{\nu(j)},

but it is more common in a finite element context to use a boundary
function :math:`B=\sum_{j\in{I_b}}U_j{\varphi}_j`, where :math:`U_j` are prescribed
Dirichlet conditions for degree of freedom number :math:`j` and :math:`U_j` is
the corresponding value.

.. math::
         u = D{\varphi}_{N_n-1} + \sum_{j\in{\mathcal{I}_s}} c_j{\varphi}_{\nu(j)}{\thinspace .}
        

In the general case with :math:`u` prescribed as :math:`U_j` at some nodes :math:`j\in{I_b}`,
we set

.. math::
         u = \sum_{j\in{I_b}} U_j{\varphi}_j +
        \sum_{j\in{\mathcal{I}_s}}c_j{\varphi}_{\nu(j)},

where :math:`c_j = u(x^{\nu(j)})`. That is, :math:`\nu(j)` maps unknown number :math:`j` to
the corresponding node number :math:`\nu(j)` such that :math:`c_j = u(x^{\nu(j)})`.

.. _nonlin:alglevel:1D:fe:group:

The group finite element method
-------------------------------

Finite element approximation of functions of :math:`u`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Since we already expand :math:`u` as :math:`\sum_j{\varphi}_j u(x_{j})`, we may use the
same approximation for other functions as well. For example,

.. math::
        
        f(u)\approx \sum_{j} f(x_{j}){\varphi}_j,
        

where :math:`f(x_{j})` is the value of :math:`f` at node :math:`j`. Since :math:`f` is a function
of :math:`u`, :math:`f(x_{j})=f(u(x_{j}))`. Introducing
:math:`u_j` as a short form for :math:`u(x_{j})`, we can write

.. math::
        
        f(u)\approx \sum_{j} f(u_{j}){\varphi}_j{\thinspace .}
        

This approximation is known as the *group finite element method*
or the *product approximation* technique. The index :math:`j` runs over
all node numbers in the mesh.

The principal advantages of the group finite element method are two-fold:

1. Complicated nonlinear expressions can be simplified to increase
   the efficiency of numerical computations.

2. One can derive *symbolic forms* of the difference equations arising
   from the finite element method in nonlinear problems.
   The symbolic form is useful for comparing finite element and finite
   difference equations of nonlinear differential equation problems.

Below, we shall explore point 2 to see exactly how the finite element
method creates more complex expressions in the resulting
linear system (the difference equations) that the finite difference
method does. It turns out that is very difficult to see
what kind of terms in the difference equations that arise from
:math:`\int f(u){\varphi}_i{\, \mathrm{d}x}` without using the group finite element
method or numerical integration utilizing the nodes only.

Note, however, that an expression like :math:`\int f(u){\varphi}_i{\, \mathrm{d}x}` causes
no problems in a computer program as the integral is calculated by
numerical integration using an existing approximation of :math:`u` in
:math:`f(u)` such that the integrand can be sampled at any spatial point.

Simplified problem
~~~~~~~~~~~~~~~~~~

Our aim now is to derive symbolic expressions for the difference
equations arising from the finite element method in nonlinear
problems and compare the expressions with those arising in the
finite difference method. To this end,
let us simplify the model problem and set :math:`a=0`, :math:`{\alpha}=1`,
:math:`f(u)=u^2`, and have Neumann conditions at both ends such that we
get a very simple nonlinear problem :math:`-u^{\prime\prime}=u^2`,
:math:`u'(0)=1`, :math:`u'(L)=0`.
The variational form is then

.. math::
         \int_0^L u^{\prime}v^{\prime}{\, \mathrm{d}x} = \int_0^L u^2v{\, \mathrm{d}x}
        - v(0),\quad\forall v\in V{\thinspace .}

The term with :math:`u^{\prime}v^{\prime}` is well known so the only new feature is
the term :math:`\int u^2v{\, \mathrm{d}x}`.

To make the distance from finite element equations to finite
difference equations as short as possible, we shall substitute :math:`c_j`
in the sum :math:`u=\sum_jc_j{\varphi}_j` by :math:`u_j=u(x_{j})` since :math:`c_j` is
the value of :math:`u` at node :math:`j`. (In the more general case
with Dirichlet conditions as well, we have a sum
:math:`\sum_jc_j{\varphi}_{\nu(j)}` where :math:`c_j` is replaced by :math:`u(x_{\nu(j)})`.
We can then introduce some other counter :math:`k` such that it is
meaningful to write :math:`u=\sum_k u_k{\varphi}_k`, where :math:`k` runs over appropriate
node numbers.)
The quantity :math:`u_j` in :math:`\sum_ju_j{\varphi}_j`
is the same as :math:`u` at mesh point number :math:`j`
in the finite difference method, which is commonly denoted :math:`u_j`.

Integrating nonlinear functions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Consider the term :math:`\int u^2v{\, \mathrm{d}x}` in the variational formulation
with :math:`v={\varphi}_i` and :math:`u=\sum_k{\varphi}_ku_k`:

.. math::
         \int_0^L (\sum_ku_k{\varphi}_k)^2{\varphi}_i{\, \mathrm{d}x}{\thinspace .}

Evaluating this integral for P1 elements (see :ref:`nonlin:exer:fu:fem:int`) results in the expression

.. math::
         \frac{h}{12}(u_{i-1}^2 + 2u_i(u_{i-1} + u_{i+1}) + 6u_i^2
        + u_{i+1}^2),

to be compared with the simple value :math:`u_i^2` that would arise in
a finite difference discretization when :math:`u^2` is sampled at
mesh point :math:`x_i`. More complicated :math:`f(u)` functions
in the integral :math:`\int_0^L f(u){\varphi}_i{\, \mathrm{d}x}`
give rise to much more lengthy expressions, if it is possible to
carry out the integral symbolically at all.

.. index:: group finite element method

.. index:: product approximation technique

Application of the group finite element method
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Let us use the group finite element method to derive the terms in
the difference equation corresponding to :math:`f(u)` in the differential
equation. We have

.. math::
         \int_0^L f(u){\varphi}_i{\, \mathrm{d}x} \approx
        \int_0^L (\sum_j {\varphi}_jf(u_j)){\varphi}_i{\, \mathrm{d}x}
        = \sum_j \left(\int_0^L {\varphi}_i{\varphi}_j{\, \mathrm{d}x}\right) f(u_j){\thinspace .}

We recognize this expression as the mass matrix :math:`M`, arising from
:math:`\int{\varphi}_i{\varphi}_j{\, \mathrm{d}x}`, times the
vector :math:`f=(f(u_0),f(u_1),\ldots,)`: :math:`Mf`. The associated terms
in the difference equations are, for P1 elements,

.. math::
         \frac{h}{6}(f(u_{i-1}) + 4f(u_i) + f(u_{i+1})){\thinspace .}

Occasionally, we want to interpret this expression in terms of finite
differences, and to this end a rewrite of this expression is convenient:

.. math::
         \frac{h}{6}(f(u_{i-1}) + 4f(u_i) + f(u_{i+1}))
        = h[f(u) - \frac{h^2}{6}D_xD_x f(u)]_i{\thinspace .}

That is, the finite element treatment of :math:`f(u)` (when using a group
finite element method) gives the same term as in a finite difference
approach, :math:`f(u_i)`, minus a diffusion term which is the
2nd-order discretization of :math:`\frac{1}{6}h^2f''(x_i)`.

We may lump the mass matrix through integration with the Trapezoidal
rule so that :math:`M` becomes diagonal in the finite element method.
In that case the :math:`f(u)` term in the differential equation
gives rise to a single term :math:`hf(u_i)`, just as in the finite difference
method.

.. _nonlin:alglevel:1D:fe:f:

Numerical integration of nonlinear terms by hand
------------------------------------------------

Let us reconsider a term :math:`\int f(u)v{\, \mathrm{d}x}` as treated in the previous
section, but now we want to integrate this term numerically.
Such an approach can lead to easy-to-interpret formulas if we apply
a numerical integration rule that samples the integrand at the node
points :math:`x_{i}` only, because at such points, :math:`{\varphi}_j(x_{i})=0`
if :math:`j\neq i`, which leads to great simplifications.

The term in question takes the form

.. math::
         \int_0^L f(\sum_k u_k{\varphi}_k){\varphi}_i{\, \mathrm{d}x}{\thinspace .}

Evaluation of the integrand at a node :math:`x_{\ell}` leads to a
collapse of the sum :math:`\sum_k u_k{\varphi}_k` to one term because

.. math::
         \sum_k u_k{\varphi}_k(x_{\ell}) = u_\ell{\thinspace .}

.. math::
         f(\sum_k u_k\underbrace{{\varphi}_k(x_{\ell})}_{\delta_{k\ell}})
        \underbrace{{\varphi}_i(x_{\ell})}_{\delta_{i\ell}}
        = f(u_\ell)\delta_{i\ell},

where we have used the Kronecker delta: :math:`\delta_{ij}=0` if :math:`i\neq j` and
:math:`\delta_{ij}=1` if :math:`i=j`.

Considering the Trapezoidal rule for integration, where the integration
points are the nodes, we have

.. math::
        
        \int_0^L f(\sum_k u_k{\varphi}_k(x)){\varphi}_i(x){\, \mathrm{d}x}
        \approx h\sum_{\ell=0}^{N_n} f(u_\ell)\delta_{i\ell} - \mathcal{C}
        = hf(u_i){\thinspace .}
        

This is the same representation of the :math:`f` term as in the finite
difference method.
The term :math:`\mathcal{C}` contains the evaluations of the integrand
at the ends with weight :math:`\frac{1}{2}`, needed to make a true Trapezoidal rule:

.. math::
         \mathcal{C} = \frac{h}{2}f(u_0){\varphi}_i(0) + \frac{h}{2}f(u_{N_n-1}){\varphi}_i(L){\thinspace .}

The answer :math:`hf(u_i)` must therefore be multiplied by :math:`\frac{1}{2}` if
:math:`i=0` or :math:`i=N_n-1`. Note that :math:`\mathcal{C}=0` for :math:`i=1,\ldots,N_n-2`.

One can alternatively use the Trapezoidal rule on the reference cell and
assemble the contributions. It is a bit more labor in this context,
but working on the reference cell is safer as that approach is
guaranteed to handle discontinuous derivatives of finite element
functions correctly (not important in this particular example),
while the rule above was derived with the
assumption that :math:`f` is continuous at the integration points.

The conclusion is that it suffices to use the Trapezoidal rule if
one wants to derive the difference equations in the finite element
method and make them similar to those arising in the finite difference
method. The Trapezoidal rule has sufficient accuracy for P1 elements, but
for P2 elements one should turn to Simpson's rule.

.. _nonlin:alglevel:1D:fe:Laplace:

Discretization of a variable coefficient Laplace term
-----------------------------------------------------

Turning back to the model problem :ref:`(429) <Eq:nonlin:alglevel:1D:pde>`, it
remains to calculate the contribution of the :math:`({\alpha} u^{\prime})^{\prime}`
and boundary terms
to the difference equations. The integral in the variational form
corresponding to :math:`({\alpha} u^{\prime})^{\prime}` is

.. math::
         \int_0^L {\alpha}(\sum_k c_k{\psi}_k){\psi}_i^{\prime}{\psi}_j^{\prime}{\, \mathrm{d}x}{\thinspace .}

Numerical integration utilizing a value of :math:`\sum_k c_k{\psi}_k` from
a previous iteration must in general be used to compute the integral.
Now our aim is to integrate symbolically, as much as we can, to obtain
some insight into how the finite element method approximates
this term.
To be able to derive symbolic expressions, we must either turn to
the group finite element method or numerical integration in the
node points. Finite element basis functions :math:`{\varphi}_i` are now used.

Group finite element method
~~~~~~~~~~~~~~~~~~~~~~~~~~~

We set :math:`{\alpha}(u)\approx \sum_k\alpha(u_k){\varphi}_k`, and then
we write

.. math::
        
        \int_0^L {\alpha}(\sum_k c_k{\varphi}_k){\varphi}_i^{\prime}{\varphi}_j^{\prime}{\, \mathrm{d}x}
        \approx
        \sum_k (\underbrace{\int_0^L {\varphi}_k{\varphi}_i^{\prime}{\varphi}_j^{\prime}{\, \mathrm{d}x}}_{L_{i,j,k}})
        {\alpha}(u_k) = \sum_k L_{i,j,k}{\alpha}(u_k){\thinspace .}
        

Further calculations are now easiest to carry out in the reference
cell. With P1 elements we can compute
:math:`L_{i,j,k}` for the two :math:`k` values that are relevant on the reference
cell. Turning to local indices, one gets

.. math::
        
        L_{r,s,t}^{(e)} =
        \frac{1}{2h}\left(\begin{array}{rr}
        1 & -1\\ 
        -1 & 1
        \end{array}\right),\quad t=0, 1,
        

where :math:`r,s,t=0,1` are indices over local degrees of
freedom in the reference cell
(:math:`i=q(e,r)`, :math:`j=q(e,s)`, and :math:`k=q(e,t)`). The
sum :math:`\sum_k L_{i,j,k}{\alpha}(u_k)` at the cell level becomes
:math:`\sum_{t=0}^1 L_{r,s,t}^{(e)}{\alpha}(\tilde u_t)`, where :math:`\tilde u_t`
is :math:`u(x_{q(e,t)})`, i.e., the value of :math:`u` at local node number :math:`t` in
cell number :math:`e`. The element matrix becomes

.. _Eq:nonlin:alglevel:1D:fe:Laplace:Ae:

.. math::

    \tag{458}
    \frac{1}{2} ({\alpha}(\tilde u_0) + {\alpha}(\tilde u^{(1)}))
        \frac{1}{h}\left(\begin{array}{rr}
        1 & -1\\ 
        -1 & 1
        \end{array}\right){\thinspace .}
        
        

As usual, we employ
a left-to-right numbering of cells and nodes.
Row number :math:`i` in the global matrix gets contributions from
the first row of the element matrix in cell :math:`i` and the last
row of the element matrix in cell :math:`i-1`.
In cell number :math:`i-1` the sum
:math:`{\alpha}(\tilde u_0) + {\alpha}(\tilde u^{(1)})` corresponds to
:math:`{\alpha}(u_{i-1}) + {\alpha}(u_i)`. The same sum becomes
:math:`{\alpha}(u_{i}) + {\alpha}(u_{i+1})` in cell number :math:`i`.
We can with this insight assemble the contributions to row number :math:`i`
in the global matrix:

.. math::
         \frac{1}{2h}(-({\alpha}(u_{i-1}) + {\alpha}(u_i)),\quad
        {\alpha}(u_{i-1}) + 2{\alpha}(u_i) + {\alpha}(u_{i+1}),\quad
        {\alpha}(u_{i}) + {\alpha}(u_{i+1})){\thinspace .}
        

Multiplying by the vector of unknowns :math:`u_i` results in a formula that
can be arranged to

.. _Eq:nonlin:alglevel:1D:fe:Laplace:diffeq:

.. math::

    \tag{459}
    -\frac{1}{h}(\frac{1}{2}({\alpha}(u_i) + {\alpha}(u_{i+1}))(u_{i+1}-u_i)
        -  \frac{1}{2}({\alpha}(u_{i-1}) + {\alpha}(u_{i}))(u_{i}-u_{i-1})),
        
        

which is nothing but the standard finite difference discretization
of :math:`-({\alpha}(u)u^{\prime})^{\prime}` with an arithmetic mean of :math:`{\alpha}(u)` (and
the usual factor :math:`h` because of the integration in the finite element method).

Numerical integration at the nodes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Instead of using the group finite element method and exact integration
we can turn to the Trapezoidal rule for computing
:math:`\int_0^L {\alpha}(\sum_k u_k{\varphi}_k){\varphi}_i^{\prime}{\varphi}_j^{\prime}{\, \mathrm{d}x}`, again at
the cell level since that is most convenient when we deal with discontinuous
functions :math:`{\varphi}_i'`:

.. math::
        
        \int_{-1}^1 \alpha(\sum_t\tilde u_t{\tilde{\varphi}}_t){\tilde{\varphi}}_r'{\tilde{\varphi}}_s'\frac{h}{2}dX
        = \int_{-1}^1 {\alpha}(\sum_{t=0}^1
        \tilde u_t{\tilde{\varphi}}_t)\frac{2}{h}\frac{d{\tilde{\varphi}}_r}{dX}
        \frac{2}{h}\frac{d{\tilde{\varphi}}_s}{dX}\frac{h}{2}dX\nonumber
        

.. math::
          
         = \frac{1}{2h}(-1)^r(-1)^s \int_{-1}^1 {\alpha}(\sum_{t=0}^1 u_t{\tilde{\varphi}}_t(X))dX
        \nonumber
        

.. math::
          
         \approx \frac{1}{2h}(-1)^r(-1)^s{\alpha} (
        \sum_{t=0}^1{\tilde{\varphi}}_t(-1)\tilde u_t) + {\alpha}(\sum_{t=0}^1{\tilde{\varphi}}_t(1)\tilde u_t)
        \nonumber
        

.. _Eq:nonlin:alglevel:1D:fe:Laplace:Ae:Trapez:

.. math::

    \tag{460}
    = \frac{1}{2h}(-1)^r(-1)^s({\alpha}(\tilde u_0) + {\alpha}(\tilde u^{(1)})){\thinspace .}
        
        

The element matrix in :ref:`(460) <Eq:nonlin:alglevel:1D:fe:Laplace:Ae:Trapez>`
is identical to the one in
:ref:`(458) <Eq:nonlin:alglevel:1D:fe:Laplace:Ae>`, showing that the
group finite element method and Trapezoidal integration are
equivalent with a standard finite discretization of a
nonlinear Laplace term :math:`({\alpha}(u)u^{\prime})^{\prime}` using an arithmetic mean for
:math:`{\alpha}`: :math:`[D_x\overline{x}D_xu]_i`.


.. admonition:: Remark about integration in the physical :math:`x` coordinate

   We might comment on integration in the physical coordinate system too.
   The common Trapezoidal rule in the section :ref:`nonlin:alglevel:1D:fe:f`
   cannot be used to integrate derivatives like :math:`{\varphi}_i^{\prime}`, because
   the formula is derived under the assumption of a continuous integrand.
   One must instead use the more basic version of the Trapezoidal rule
   where all the trapezoids are summed up. This is straightforward, but
   I think it is even more straightforward to apply the Trapezoidal
   rule on the reference cell and assemble the contributions.




The term :math:`\int auv{\, \mathrm{d}x}` in the variational form is linear and gives
these terms in the algebraic equations:

.. math::
         \frac{ah}{6}(u_{i-1} + 4u_i + u_{i+1})
        = ah[u - \frac{h^2}{6}D_xD_x u]_i{\thinspace .}

The final term in the variational form is the Neumann condition
at the boundary: :math:`Cv(0)=C{\varphi}_i(0)`. With a left-to-right numbering
only :math:`i=0` will give a contribution :math:`Cv(0)=C\delta_{i0}` (since
:math:`{\varphi}_i(0)\neq 0` only for :math:`i=0`).


.. admonition:: Summary

   For the equation
   
   .. math::
            -({\alpha}(u)u^{\prime})^{\prime} +au = f(u),
   
   P1 finite elements results in difference equations where
   
    * the term :math:`-({\alpha}(u)u^{\prime})^{\prime}` becomes :math:`-h[D_x\overline{{\alpha}(u)}^xD_x u]_i`
      if the group finite element method or Trapezoidal integration is applied,
   
    * :math:`f(u)` becomes :math:`hf(u_i)` with Trapezoidal integration or the
      "mass matrix" representation :math:`h[f(u) - \frac{h}{6}D_xD_x f(u)]_i`
      if computed by a group finite element method,
   
    * :math:`au` leads to the "mass matrix" form :math:`ah[u - \frac{h}{6}D_xD_x u]_i`.




As we now have explicit expressions for the nonlinear difference
equations also in the finite element method, a Picard or Newton method
can be defined as shown for the finite difference method.  However,
our efforts in deriving symbolic forms of the difference equations in
the finite element method was motivated by a desire to see how
nonlinear terms in differential equations make the finite element and
difference method different. For practical calculations in computer
programs we apply numerical integration, normally the more accurate
Gauss-Legendre quadrature rules, to the integrals directly. This
allows us to easily *evaluate* the nonlinear algebraic equations for a
given numerical approximation of :math:`u` (here denoted :math:`u^{-}`).  To
*solve* the nonlinear algebraic equations we need to apply the Picard
iteration method or Newton's method to the variational form directly,
as shown next.

