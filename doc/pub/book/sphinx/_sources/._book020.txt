.. !split

.. _fem:deq:1D:essBC:

Boundary conditions: specified nonzero value
============================================

We have to take special actions to incorporate nonzero
Dirichlet conditions,
such as :math:`u(L)=D`, into the computational procedures. The present
section outlines alternative, yet mathematically equivalent, methods.

.. _fem:deq:1D:fem:essBC:Bfunc:

General construction of a boundary function
-------------------------------------------

In the section :ref:`fem:deq:1D:essBC:Bfunc` we introduced a boundary function :math:`B(x)`
to deal with nonzero Dirichlet boundary conditions for :math:`u`. The
construction of such a function is not always trivial, especially not
in multiple dimensions. However, a simple and general constructive idea
exists when the
basis functions have the property

.. math::
        
        {\varphi}_i(x_{j}) = \delta_{ij},\quad
        \delta_{ij} = \left\lbrace\begin{array}{ll}
        1, & i=j,\\ 
        0, & i\neq j,
        \end{array}\right.
        

where :math:`x_{j}` is a boundary point. Examples on such
functions are the Lagrange interpolating polynomials and finite
element functions.

Suppose now that :math:`u` has Dirichlet boundary conditions at nodes
with numbers :math:`i\in{I_b}`. For example, :math:`{I_b} = \{0,N_n-1\}` in a 1D
mesh with node numbering from left to right and Dirichlet conditions
at the end nodes :math:`i=0` and :math:`i=N_n-1`.
Let :math:`U_i` be the corresponding prescribed values of :math:`u(x_{i})`.
We can then, in general, use

.. _Eq:_auto104:

.. math::

    \tag{207}
    B(x) = \sum_{j\in{I_b}} U_j{\varphi}_j(x){\thinspace .}
        
        

It is easy to verify that
:math:`B(x_{i})= \sum_{j\in{I_b}} U_j{\varphi}_j(x_{i})=U_i`.

The unknown function can then be written as

.. _Eq:_auto105:

.. math::

    \tag{208}
    u(x) = \sum_{j\in{I_b}} U_j{\varphi}_j(x) + \sum_{j\in{\mathcal{I}_s}}c_j{\varphi}_{\nu(j)},
        
        

where :math:`\nu(j)` maps unknown number :math:`j` in the equation system to
node :math:`\nu(j)`, :math:`{I_b}` is the set of indices corresponding to basis functions
associated with nodes where Dirichlet conditions apply, and :math:`{\mathcal{I}_s}` is the
set of indices used to number the unknowns from zero to :math:`N`.
We can easily show that with this :math:`u`, a Dirichlet
condition :math:`u(x_{k})=U_k` is fulfilled:

.. math::
        
        u(x_{k}) = \sum_{j\in{I_b}} U_j\underbrace{{\varphi}_j(x_k)}_{\neq 0\,
        \Leftrightarrow\,j=k} +
        \sum_{j\in{\mathcal{I}_s}} c_j\underbrace{{\varphi}_{\nu(j)}(x_{k})}_{=0,\ k\not\in{\mathcal{I}_s}}
        = U_k 

Some examples will further clarify the notation. With a regular
left-to-right numbering of nodes in a mesh with P1 elements,
and Dirichlet conditions at :math:`x=0`, we use finite element basis
functions associated with the nodes :math:`1, 2, \ldots, N_n-1`, implying
that  :math:`\nu(j)=j+1`, :math:`j=0,\ldots,N`, where :math:`N=N_n-2`. Consider
a particular mesh:

.. figure:: fe_mesh1D_P1.png
   :width: 500

The expansion associated with this mesh becomes

.. math::
         u(x) = U_0{\varphi}_0(x) + c_0{\varphi}_1(x) +
        c_1{\varphi}_2(x) + \cdots + c_4{\varphi}_5(x){\thinspace .}
        

Switching to the more standard case of left-to-right numbering and
boundary conditions :math:`u(0)=C`, :math:`u(L)=D`, we have :math:`N=N_n-3` and

.. math::
        \begin{align*}
        u(x) &= C{\varphi}_0 + D{\varphi}_{N_n-1} + \sum_{j\in{\mathcal{I}_s}} c_j{\varphi}_{j+1}\\ 
        &= C{\varphi}_0 + D{\varphi}_{N_n} + c_0{\varphi}_1 + c_1{\varphi}_2 +\cdots
        + c_N{\varphi}_{N_n-2}{\thinspace .}
        \end{align*}

Finite element meshes in non-trivial 2D and 3D geometries usually leads
to an irregular cell and node numbering. Let us therefore take a look
at an irregular numbering in 1D:

.. figure:: fe_mesh1D_random_numbering.png
   :width: 500

Say we in this mesh have Dirichlet conditions on the left-most and
right-most node, with numbers 3 and 1, respectively.  We can number
the unknowns at the interior nodes as we want, e.g., from left to
right, resulting in :math:`\nu(0)=0`, :math:`\nu(1)=4`, :math:`\nu(2)=5`, :math:`\nu(3)=2`.
This gives

.. math::
         B(x) = U_3{\varphi}_3(x) + U_1{\varphi}_1(x),

and

.. math::
         u(x) = B(x) + \sum_{j=0}^3 c_j{\varphi}_{\nu(j)}
        = U_3{\varphi}_3 + U_1{\varphi}_1 + c_0{\varphi}_0 + c_1{\varphi}_4
        + c_2{\varphi}_5 + c_3{\varphi}_2{\thinspace .}

The idea of constructing :math:`B`, described here, generalizes almost
trivially to 2D and 3D problems: :math:`B=\sum_{j\in{I_b}}U_j{\varphi}_j`,
where :math:`{I_b}` is the index set containing the numbers of all the
nodes on the boundaries where Dirichlet values are prescribed.

Example on computing with a finite element-based boundary function
------------------------------------------------------------------

Let us see how the model problem :math:`-u''=2`, :math:`u(0)=C`, :math:`u(L)=D`,
is affected by a :math:`B(x)` to incorporate boundary values.
Inserting the expression

.. math::
         u(x) = B(x) + \sum_{j\in{\mathcal{I}_s}}c_j{\psi}_j(x)

in :math:`-(u'',{\psi}_i)=(f,{\psi}_i)` and
integrating by parts results in a linear system with

.. math::
        
        A_{i,j} = \int_0^L {\psi}_i'(x){\psi}_j'(x) {\, \mathrm{d}x},\quad
        b_i = \int_0^L (f(x){\psi}_i(x) - B'(x){\psi}_i'(x)) {\, \mathrm{d}x}{\thinspace .}
        

We choose :math:`{\psi}_i={\varphi}_{i+1}`, :math:`i=0,\ldots,N=N_n-3`
if the node numbering is from left
to right. (Later we also need the assumption that cells too
are numbered from left to right.)
The boundary function becomes

.. math::
         B(x) = C{\varphi}_0(x) + D{\varphi}_{N_n-1}(x){\thinspace .}

The expansion for :math:`u(x)` is

.. math::
         u(x)  = B(x) + \sum_{j\in{\mathcal{I}_s}} c_j{\varphi}_{j+1}(x){\thinspace .} 

We can write the matrix and right-hand side entries as

.. math::
        \begin{align*}
        A_{i-1,j-1} &= \int_0^L {\varphi}_i'(x){\varphi}_j'(x) {\, \mathrm{d}x},\\ 
        b_{i-1} &=
        \int_0^L (f(x){\varphi}_i'(x) - (C{\varphi}_{0}'(x) + D{\varphi}_{N_n-1}'(x)){\varphi}_i'(x) ){\, \mathrm{d}x},
        \end{align*}

for :math:`i,j = 1,\ldots,N+1=N_n-2`. Note that we have here used
:math:`B'=C{\varphi}_0' + D{\varphi}_{N_n-1}'`.

Computations in physical coordinates
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Most of the terms in the linear system have already been computed
so we concentrate on the new contribution from the boundary function.
The integral :math:`C\int_0^L {\varphi}_{0}'(x)){\varphi}_i'(x) {\, \mathrm{d}x}`, associated
with the Dirichlet condition in :math:`x=0`,  can only get
a nonzero contribution from the first cell,
:math:`\Omega^{(0)}=[x_{0},x_{1}]`
since :math:`{\varphi}_{0}'(x)=0` on all other cells. Moreover,
:math:`{\varphi}_{0}'(x){\varphi}_i'(x) {\, \mathrm{d}x} \neq 0` only for :math:`i=0` and :math:`i=1`
(but node :math:`i=0` is excluded from the formulation),
since :math:`{\varphi}_{i}=0` on the first cell if :math:`i>1`.
With a similar reasoning we realize that
:math:`D\int_0^L {\varphi}_{N_n-1}'(x)){\varphi}_i'(x) {\, \mathrm{d}x}` can only get
a nonzero contribution from the last cell.
From the explanations of the
calculations in the section :ref:`fem:approx:global:linearsystem` we then find that

.. math::
        \begin{align*}
        \int_0^L {\varphi}_{0}'(x){\varphi}_{1}'(x) {\, \mathrm{d}x} &=
        (-\frac{1}{h})\cdot\frac{1}{h}\cdot h = -\frac{1}{h},\\ 
        \int_0^L {\varphi}_{N_n-1}'(x){\varphi}_{N_n-2}'(x) {\, \mathrm{d}x} &=
        \frac{1}{h}\cdot(-\frac{1}{h})\cdot h = -\frac{1}{h}{\thinspace .}
        \end{align*}

With these expressions we get

.. math::
         b_0 = \int_0^Lf(x){\varphi}_1{\, \mathrm{d}x} - C(-\frac{1}{h}),\quad
        b_N = \int_0^L f(x){\varphi}_{N_n-2}{\, \mathrm{d}x} - D(-\frac{1}{h}){\thinspace .}

Cellwise computations on the reference element
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

As an equivalent alternative, we now turn to cellwise computations.
The element matrices and vectors are calculated as in the section :ref:`fem:deq:1D:comp:elmwise`, so we concentrate on the impact of
the new term involving :math:`B(x)`. This new term,
:math:`B'=C{\varphi}_0' + D{\varphi}_{N_n-1}'`, vanishes on all cells except
for :math:`e=0` and :math:`e=N_e`. Over the first cell (:math:`e=0`) the :math:`B'(x)` function
in local coordinates reads

.. math::
         \frac{dB}{dx} = C\frac{2}{h}\frac{d{\tilde{\varphi}}_0}{dX},

while over the last cell (:math:`e=N_e`) it looks like

.. math::
         \frac{dB}{dx} = D\frac{2}{h}\frac{d{\tilde{\varphi}}_1}{dX}{\thinspace .}

For an arbitrary interior cell, we have the formula

.. math::
         \tilde b_r^{(e)} = \int_{-1}^1 f(x(X)){\tilde{\varphi}}_r(X)\frac{h}{2}{\, \mathrm{d}X},

for an entry in the local element vector.
In the first cell, the value at local node 0 is known so only the value
at local node 1 is unknown. The associated element vector entry becomes

.. math::
        \begin{align*}
        \tilde b_0^{(1)} &= \int_{-1}^1 \left(f{\tilde{\varphi}}_1 -
        C\frac{2}{h}\frac{d{\tilde{\varphi}}_0}{dX}\frac{2}{h}\frac{d{\tilde{\varphi}}_1}{dX}\right)
        \frac{h}{2} {\, \mathrm{d}X} \\ 
        & = \frac{h}{2} 2\int_{-1}^1 {\tilde{\varphi}}_1  {\, \mathrm{d}X}
        - C\frac{2}{h}(-\frac{1}{2})\frac{2}{h}\frac{1}{2}\frac{h}{2}\cdot 2
        = h + C\frac{1}{h}{\thinspace .}
        \end{align*}

The value at local node 1 in the last cell is known so the
element vector here is

.. math::
        \begin{align*}
        \tilde b_0^{N_e} &= \int_{-1}^1 \left(f{\tilde{\varphi}}_0 -
        D\frac{2}{h}\frac{d{\tilde{\varphi}}_1}{dX}\frac{2}{h}\frac{d{\tilde{\varphi}}_0}{dX}\right)
        \frac{h}{2} {\, \mathrm{d}X}\\ 
        & = \frac{h}{2} 2\int_{-1}^1 {\tilde{\varphi}}_0  {\, \mathrm{d}X}
        - D\frac{2}{h}\frac{1}{2}\frac{2}{h}(-\frac{1}{2})\frac{h}{2}\cdot 2
        = h + D\frac{1}{h}{\thinspace .}
        \end{align*}

The contributions from the :math:`B(x)` function to the global right-hand side
vector becomes :math:`C/h` for :math:`b_0` and :math:`D/h` for :math:`b_N`, exactly as we
computed in the physical domain.

.. _fem:deq:1D:fem:essBC:Bfunc:modsys:

Modification of the linear system          (1)
----------------------------------------------

From an implementational point of view, there is a convenient alternative
to adding the :math:`B(x)` function and using only the basis functions associated
with nodes where :math:`u` is truly unknown.
Instead of seeking

.. _Eq:fem:deq:1D:fem:essBC:Bfunc:modsys:utrad:

.. math::

    \tag{209}
    u(x) = \sum_{j\in{I_b}} U_j{\varphi}_j(x)
        + \sum_{j\in{\mathcal{I}_s}}c_j{\varphi}_{\nu(j)}(x),
        
        

we use the sum over all degrees of freedom, including the known boundary
values:

.. _Eq:fem:deq:1D:fem:essBC:Bfunc:modsys:uall:

.. math::

    \tag{210}
    u(x) = \sum_{j\in{\mathcal{I}_s}}c_j{\varphi}_j(x){\thinspace .}
        
        

Note that the collections of unknowns
:math:`\left\{ {c}_i \right\}_{i\in{\mathcal{I}_s}}` in :ref:`(209) <Eq:fem:deq:1D:fem:essBC:Bfunc:modsys:utrad>`
and :ref:`(210) <Eq:fem:deq:1D:fem:essBC:Bfunc:modsys:uall>` are different.
The index set :math:`{\mathcal{I}_s}=\{0,\ldots,N\}` always goes to :math:`N`, and the
number of unknowns is :math:`N+1`, but
in :ref:`(209) <Eq:fem:deq:1D:fem:essBC:Bfunc:modsys:utrad>` the unknowns
correspond to nodes where :math:`u` is not known, while
in :ref:`(210) <Eq:fem:deq:1D:fem:essBC:Bfunc:modsys:uall>` the unknowns
cover :math:`u` values at all the nodes. So, if the index set
:math:`{I_b}` contains :math:`N_b` node numbers where :math:`u` is prescribed,
we have that :math:`N=N_n-N_b` in
:ref:`(209) <Eq:fem:deq:1D:fem:essBC:Bfunc:modsys:utrad>` and
:math:`N=N_n` in :ref:`(210) <Eq:fem:deq:1D:fem:essBC:Bfunc:modsys:uall>`.

The idea is to compute the entries in the linear system as if no
Dirichlet values are prescribed. Afterwards, we modify the linear system
to ensure that the known :math:`c_j` values are incorporated.

A potential problem arises for the boundary term :math:`[u'v]_0^L` from the
integration by parts: imagining no Dirichlet conditions means that we
no longer require :math:`v=0` at Dirichlet points, and the boundary term is
then nonzero at these points. However, when we modify the linear
system, we will erase whatever the contribution from :math:`[u'v]_0^L`
should be at the Dirichlet points in the right-hand side of the linear
system. We can therefore safely forget :math:`[u'v]_0^L` at any point where
a Dirichlet condition applies.

Computations in the physical system
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Let us redo the computations in the example in
the section :ref:`fem:deq:1D:fem:essBC:Bfunc`. We solve :math:`-u''=2` with
:math:`u(0)=0` and :math:`u(L)=D`. The expressions for :math:`A_{i,j}` and :math:`b_i`
are the same, but the numbering is different as the numbering of
unknowns and nodes now coincide:

.. math::
        
        A_{i,j} = \int_0^L {\varphi}_i'(x){\varphi}_j'(x) {\, \mathrm{d}x},\quad
        b_{i} = \int_0^L f(x){\varphi}_i(x) {\, \mathrm{d}x},
        

for :math:`i,j = 0,\ldots,N=N_n-1`.
The integrals involving basis functions
corresponding to interior mesh nodes, :math:`i,j=1,\ldots,N_n-2`, are
obviously the same as before. We concentrate on the contributions
from :math:`{\varphi}_0` and :math:`{\varphi}_{N_n-1}`:

.. math::
        \begin{align*}
        A_{0,0} &= \int_0^L ({\varphi}_0')^2{\, \mathrm{d}x} = \int_{0}^{x_{1}}
        = ({\varphi}_0')^2{\, \mathrm{d}x} \frac{1}{h},\\ 
        A_{0,1} &= \int_0^L {\varphi}_0'{\varphi}_1'{\, \mathrm{d}x}
        = \int_{0}^{x_{1}} {\varphi}_0'{\varphi}_1'{\, \mathrm{d}x} = -\frac{1}{h},\\ 
        A_{N,N} &= \int_0^L ({\varphi}_N')^2{\, \mathrm{d}x}
        = \int_{x_{N_n-2}}^{x_{N_n-1}} ({\varphi}_N')^2{\, \mathrm{d}x} = \frac{1}{h},\\ 
        A_{N,N-1} &= \int_0^L {\varphi}_N'{\varphi}_{N-1}'{\, \mathrm{d}x}
        =\int_{x_{N_n-2}}^{x_{N_n-1}} {\varphi}_N'{\varphi}_{N-1}'{\, \mathrm{d}x} = -\frac{1}{h}{\thinspace .}
        \end{align*}

The new terms on the right-hand side are also those involving
:math:`{\varphi}_0` and :math:`{\varphi}_{N_n-1}`:

.. math::
        \begin{align*}
        b_0 &= \int_0^L 2{\varphi}_0(x) {\, \mathrm{d}x} = \int_0^{x_{1}} 2{\varphi}_0(x){\, \mathrm{d}x} = h,\\ 
        b_N &=  \int_0^L 2{\varphi}_{N_n-1}{\, \mathrm{d}x} =
        \int_{x_{N_n-2}}^{x_{N_n-1}} 2{\varphi}_{N_n-1}{\, \mathrm{d}x} = h{\thinspace .}
        \end{align*}

The complete matrix system, involving all degrees of freedom, takes the form

.. _Eq:fem:deq:1D:ex1:Ab:glob2:

.. math::

    \tag{211}
    \frac{1}{h}\left(
        \begin{array}{ccccccccc}
        1 & -1 & 0
        &\cdots &
        \cdots & \cdots & \cdots &
        \cdots & 0 \\ 
        -1 & 2 & -1 & \ddots &   & &  & &  \vdots \\ 
        0 & -1 & 2 & -1 &
        \ddots & &  &  & \vdots \\ 
        \vdots & \ddots &  & \ddots & \ddots & 0 &  & & \vdots \\ 
        \vdots &  & \ddots & \ddots & \ddots & \ddots & \ddots & & \vdots \\ 
        \vdots & &  & 0 & -1 & 2 & -1 & \ddots & \vdots \\ 
        \vdots & & &  & \ddots & \ddots & \ddots &\ddots  & 0 \\ 
        \vdots & & & &  &\ddots  & \ddots &\ddots  & -1 \\ 
        0 &\cdots & \cdots &\cdots & \cdots & \cdots  & 0 & -1 & 1
        \end{array}
        \right)
        \left(
        \begin{array}{c}
        c_0 \\ 
        \vdots\\ 
        \vdots\\ 
        \vdots \\ 
        \vdots \\ 
        \vdots \\ 
        \vdots \\ 
        \vdots\\ 
        c_{N}
        \end{array}
        \right)
        =
        \left(
        \begin{array}{c}
        h \\ 
        2h\\ 
        \vdots\\ 
        \vdots \\ 
        \vdots \\ 
        \vdots \\ 
        \vdots \\ 
        2h\\ 
        h
        \end{array}
        \right)
        
        

Incorporation of Dirichlet values can now be done by replacing
the first and last equation by
the very simple equations :math:`c_0=0` and :math:`c_N=D`, respectively.
Note that the factor :math:`1/h` in front of the matrix then requires
a factor :math:`h` to be introduce appropriately on the diagonal in the first and last
row of the matrix.

.. _Eq:fem:deq:1D:ex1:Ab:glob3:

.. math::

    \tag{212}
    \frac{1}{h}\left(
        \begin{array}{ccccccccc}
        h & 0 & 0
        &\cdots &
        \cdots & \cdots & \cdots &
        \cdots & 0 \\ 
        -1 & 2 & -1 & \ddots &   & &  & &  \vdots \\ 
        0 & -1 & 2 & -1 &
        \ddots & &  &  & \vdots \\ 
        \vdots & \ddots &  & \ddots & \ddots & 0 &  & & \vdots \\ 
        \vdots &  & \ddots & \ddots & \ddots & \ddots & \ddots & & \vdots \\ 
        \vdots & &  & 0 & -1 & 2 & -1 & \ddots & \vdots \\ 
        \vdots & & &  & \ddots & \ddots & \ddots &\ddots  & 0 \\ 
        \vdots & & & &  &\ddots  & \ddots &\ddots  & -1 \\ 
        0 &\cdots & \cdots &\cdots & \cdots & \cdots  & 0 & 0 & h
        \end{array}
        \right)
        \left(
        \begin{array}{c}
        c_0 \\ 
        \vdots\\ 
        \vdots\\ 
        \vdots \\ 
        \vdots \\ 
        \vdots \\ 
        \vdots \\ 
        \vdots\\ 
        c_{N}
        \end{array}
        \right)
        =
        \left(
        \begin{array}{c}
        0 \\ 
        2h\\ 
        \vdots\\ 
        \vdots \\ 
        \vdots \\ 
        \vdots \\ 
        \vdots \\ 
        2h\\ 
        D
        \end{array}
        \right)
        
        

Note that because we do not require :math:`{\varphi}_i(0)=0` and
:math:`{\varphi}_i(L)=0`, :math:`i\in{\mathcal{I}_s}`, the boundary term :math:`[u'v]_0^L`,
in principle, gives
contributions :math:`u'(0){\varphi}_0(0)` to :math:`b_0` and
:math:`u'(L){\varphi}_N(L)` to :math:`b_N` (:math:`u'{\varphi}_i` vanishes for :math:`x=0` or
:math:`x=L` for :math:`i=1,\ldots,N-1`).  Nevertheless, we erase these
contributions in :math:`b_0` and :math:`b_N` and insert boundary values instead. This
argument shows why we can drop computing :math:`[u'v]_0^L` at Dirichlet
nodes when we implement the Dirichlet values by modifying the linear
system.

.. _fem:deq:1D:fem:essBC:Bfunc:modsys:symm:

Symmetric modification of the linear system
-------------------------------------------

The original matrix system :ref:`(200) <Eq:fem:deq:1D:ex1:Ab:glob>` is symmetric,
but the modifications in :ref:`(212) <Eq:fem:deq:1D:ex1:Ab:glob3>` destroy this
symmetry. Our described modification will in general destroy an
initial symmetry in the matrix system. This is not a particular
computational disadvantage for tridiagonal systems arising in 1D
problems, but may be more serious in 2D and 3D problems when the
systems are large and exploiting symmetry can be important for halving
the storage demands and speeding up computations. Methods for solving
symmetric matrix are also usually more stable and efficient than those
for non-symmetric systems.  Therefore, an alternative modification
which preserves symmetry is attractive.

One can formulate a general algorithm for incorporating a Dirichlet
condition in a symmetric way.
Let :math:`c_k` be a coefficient corresponding to a known value
:math:`u(x_{k}) = U_k`.
We want to replace equation :math:`k` in the system by :math:`c_k=U_k`, i.e.,
insert zeroes in row number :math:`k` in the coefficient matrix,
set 1 on the diagonal, and replace :math:`b_k` by :math:`U_k`.
A symmetry-preserving modification consists in first
subtracting column number :math:`k` in the coefficient matrix, i.e., :math:`A_{i,k}`
for :math:`i\in{\mathcal{I}_s}`, times the boundary value :math:`U_k`, from the
right-hand side: :math:`b_i \leftarrow b_i - A_{i,k}U_k`,
:math:`i=0,\ldots,N`. Then we put
zeroes in both row number :math:`k` *and* column number :math:`k` in the coefficient matrix,
and finally set :math:`b_k=U_k`. The steps in algorithmic form becomes

 1. :math:`b_i \leftarrow b_i - A_{i,k}U_k` for :math:`i\in{\mathcal{I}_s}`

 2. :math:`A_{i,k} = A_{k,i} = 0` for :math:`i\in{\mathcal{I}_s}`

 3. :math:`A_{k,k}=1`

 4. :math:`b_i = U_k`

This modification goes as follows for the specific linear system
written out in :ref:`(211) <Eq:fem:deq:1D:ex1:Ab:glob2>` in
the section :ref:`fem:deq:1D:fem:essBC:Bfunc:modsys`. First we
subtract the first column in the coefficient matrix, times the boundary
value, from the right-hand side. Because :math:`c_0=0`, this subtraction
has no effect. Then we subtract the last column, times the boundary value :math:`D`,
from the right-hand side. This action results in :math:`b_{N-1}=2h+D/h` and
:math:`b_N=h-2D/h`. Thereafter, we place zeros in the first and last row and
column in the coefficient matrix and 1 on the two corresponding diagonal
entries. Finally, we set :math:`b_0=0` and :math:`b_N=D`. The result becomes

.. _Eq:fem:deq:1D:ex1:Ab:glob3:symm:

.. math::

    \tag{213}
    \frac{1}{h}\left(
        \begin{array}{ccccccccc}
        h & 0 & 0
        &\cdots &
        \cdots & \cdots & \cdots &
        \cdots & 0 \\ 
        0 & 2 & -1 & \ddots &   & &  & &  \vdots \\ 
        0 & -1 & 2 & -1 &
        \ddots & &  &  & \vdots \\ 
        \vdots & \ddots &  & \ddots & \ddots & 0 &  & & \vdots \\ 
        \vdots &  & \ddots & \ddots & \ddots & \ddots & \ddots & & \vdots \\ 
        \vdots & &  & 0 & -1 & 2 & -1 & \ddots & \vdots \\ 
        \vdots & & &  & \ddots & \ddots & \ddots &\ddots  & 0 \\ 
        \vdots & & & &  &\ddots  & \ddots &\ddots  & 0 \\ 
        0 &\cdots & \cdots &\cdots & \cdots & \cdots  & 0 & 0 & h
        \end{array}
        \right)
        \left(
        \begin{array}{c}
        c_0 \\ 
        \vdots\\ 
        \vdots\\ 
        \vdots \\ 
        \vdots \\ 
        \vdots \\ 
        \vdots \\ 
        \vdots\\ 
        c_{N}
        \end{array}
        \right)
        =
        \left(
        \begin{array}{c}
        0 \\ 
        2h\\ 
        \vdots\\ 
        \vdots \\ 
        \vdots \\ 
        \vdots \\ 
        \vdots \\ 
        2h +D/h\\ 
        D
        \end{array}
        \right)
        
        

Modification of the element matrix and vector
---------------------------------------------

The modifications of the global linear system can alternatively
be done for the element matrix and vector. Let us perform the
associated calculations in the computational example where
the element matrix and vector is given by
:ref:`(205) <Eq:fem:deq:1D:ex1:Ab:elm>`. The modifications are needed in
cells where one of the degrees of freedom is known. In the
present example, this means
the first and last cell. We compute the element matrix
and vector as if there were no Dirichlet conditions. The boundary term
:math:`[u'v]_0^L` is simply forgotten at nodes that have Dirichlet conditions
because the modification of the element vector will anyway erase the
contribution from the boundary term. In the first cell,
local degree of freedom number 0
is known and the modification becomes

.. _Eq:fem:deq:1D:ex1:Ab:elm:bc:0:

.. math::

    \tag{214}
    \tilde A^{(0)} =
        A = \frac{1}{h}\left(\begin{array}{rr}
        h & 0\\ 
        -1 & 1
        \end{array}\right),\quad
        \tilde b^{(0)} = \left(\begin{array}{c}
        0\\ 
        h
        \end{array}\right){\thinspace .}
        
        

In the last cell we set

.. _Eq:fem:deq:1D:ex1:Ab:elm:bc:N:

.. math::

    \tag{215}
    \tilde A^{(N_e)} =
        A = \frac{1}{h}\left(\begin{array}{rr}
        1 & -1\\ 
        0 & h
        \end{array}\right),\quad
        \tilde b^{(N_e)} = \left(\begin{array}{c}
        h\\ 
        D
        \end{array}\right){\thinspace .}
        
        

We can also perform the symmetric modification. This operation affects
only the last cell with a nonzero Dirichlet condition. The algorithm
is the same as for the global linear system, resulting in

.. _Eq:fem:deq:1D:ex1:Ab:elm:bc:N:symm:

.. math::

    \tag{216}
    \tilde A^{(N_e)} =
        A = \frac{1}{h}\left(\begin{array}{rr}
        1 & 0\\ 
        0 & h
        \end{array}\right),\quad
        \tilde b^{(N_e)} = \left(\begin{array}{c}
        h + D/h\\ 
        D
        \end{array}\right){\thinspace .}
        
        

The reader is encouraged to assemble the element matrices and vectors and
check that the result coincides with the system
:ref:`(213) <Eq:fem:deq:1D:ex1:Ab:glob3:symm>`.

.. As a final remark, we repeat that Dirichlet conditions are referred

.. to as essential boundary conditions because they require

.. quite some work with modifying

.. either the linear system or the expansion formula

.. for :math:`u`. Boundary conditions for the derivative are much easier to

.. implement, as shown next, and therefore deserve the name *natural

.. boundary condition*.

