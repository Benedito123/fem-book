

======= Convection-diffusion equation - non-physical oscillations  =======
label{ch:convdiff}

In the previous examples we have obtained reasonable approximations
that resemble the solution of the continuous system for several
elliptic problems with different kinds of approaches. In this
chapter we will consider a convection-diffusion equation where
many methods will fail. The failure is purly numerical
and is often tied to the resolution. This example is perhaps
the prime example of numerical instabilities in the context of
PDEs.

[kam: might start out a bit more general]

Consider the equation
!bt
\begin{align*}
\label{convdiff:1D}
- \epsilon u_{xx} - u_x &= 0, \quad \in  (0,1), \\
u(0) &= 1, \\
u(1) &= 0 .
\end{align*}
!et

The problem describes a transport problem where in this case
the transport is modelled by the first order term $u_x$ that is coupled to a diffusion
process described by the second order term $-\epsilon u_{xx}$. In many applications $\epsilon \ll 1$
and the dominating term is $u_x$. Still, the second order term $-\epsilon u_{xx}$
term is important as makes the problem change from a first order problem to a second order
problem that needs to be equipped with boundary conditions on both sides.
For this reason, the problem is called a *singular pertubation problem* as the problem changes
fundamentally in the sense that different boundary conditions are required in the limiting
case $\epsilon=0$.

The solution of the above problem is
!bt
\begin{equation}
\label{convdiff:1D:analytical}
u(x) = \frac{e^{-x/\epsilon} - 1}{ e^{-1/\epsilon} -1 } .
\end{equation}
!et

FIGURE: [fig/conv-diff-analytical.png, width=400] Analytical solution to the convection-diffusion problem for varying $epsilon$. label{convdiff:analytical}


The solution is plotted in Figure ref{convdiff:analytical} for different values of $\epsilon$.
Clearly, as $\epsilon$ decrease the exponential function represents a sharper and sharper gradient.
From a physical or engineering point of view, the equation (ref{convdiff:1D}) and the solution
(ref{convdiff:1D:analytical}) represent the simplest problem representing the common
phenomen of boundary layers that is common in all kinds of fluid-flow problems in nature.
Here, $\epsilon$ is related to the inverse of the Reynolds number which frequently
in engineering is of the order of $10^6$ to $10^9$. In these applications, the boundary
layer representing the gradient is extremely thin.

The case $epsilon=0$ is qualitatively different from the case when $epsilon\rightarrow 0$.
This case corresponds to the equation
!bt
\begin{align*}
\label{convdiff:1D:0}
- u_x &= 0, \quad \in  (0,1), \\
u(0) &= 1, \\
\end{align*}
!et
The solution to this problem is $u=1$. Hence, in the limiting case the solution lack the
sharp boundary layer and becomes smoother than for small $epsilon$.



In this chapter we will not embark on the facinating and complex issue of boundary layer
theory but only consider the numerical issues related to this phenomen.
Let us as earlier therefore consider an approximate solution on the following form
!bt
\begin{equation}
u(x) = \sum^{N-1}_{i=1} c_i \baspsi_i(x)  + B(x)
\end{equation}
!et

[kam: check if the numbering and basis func are consistent with earlier]

As earlier $\{\baspsi_i(x)\}_{i=1}^{N-1}\}$ are zero at the boundary $x=0$
and $x=1$ and the boundary conditions are accounted for by the function $B(x)$.
Let
!bt
\begin{equation}
B(x) = c_0 (1-x) + c_N x .
\end{equation}
!et

Then we fixate $c_0=0$ and $c_N=1$ which makes $B(x) = x$.
To determine $\{c_i\}1{i=1}^{N-1}\}$  we consider the homogenous Dirichlet problem
where we solve for $\hat{u} = u - B$. The homogenous Dirichlet problem reads
!bt
\begin{align*}
\label{convdiff:1D:homo}
- \epsilon \hat{u}_{xx} + \hat{u}_x &= 1, \quad \in  (0,1), \\
\hat{u}(0) &= 0, \\
\hat{u}(1) &= 0 .
\end{align*}
!et

The Galerkin formulation of (ref{convdiff:1D:homo}) is obtained as
!bt
\begin{equation}
\int_0^1
(- \epsilon \hat{u}_{xx} + \hat{u}_x + c_0 - c_1) \baspsi_j(x) dx .
\end{equation}
!et
Integration by parts ....

... matrix and linear system
.... code
... global functions before fem?




[kam: Petrov-Galerkin does not really work for these global function as the test functions would not then
be zero at the boundary. I've tested. Perhaps conclude this part of conv-diff that
the different methods give exactly the same solution as they are just different representation
of the same polynomal space. CPU time is however enormously different. ]

In the previous chapter we saw that there was a difference between ...

FIGURE: [fig/Lagrange8.png, width=400] Solution obtained with Galerkin approximation using Lagrangian polynomals of order up to 8 for various $epsilon$. label{convdiff:osc:Lagrange8}

FIGURE: [fig/Bernstein8.png, width=400] Solution obtained with Galerkin approximation using Bernstein polynomals of order up to 8 for various $epsilon$. label{convdiff:osc:Bernstein8}

FIGURE: [fig/Lagrange16.png, width=400] Solution obtained with Galerkin approximation using Lagrangian polynomals of order up to 16 for various $epsilon$. label{convdiff:osc:Lagrange16}


FIGURE: [fig/Bernstein16.png, width=400] Solution obtained with Galerkin approximation using Lagrangian polynomals of order up to 16 for various $epsilon$. label{convdiff:osc:Bernstein16}
